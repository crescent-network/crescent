// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/liquidamm/v1beta1/liquidamm.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuctionStatus enumerates the valid status of an auction.
type AuctionStatus int32

const (
	// AUCTION_STATUS_UNSPECIFIED defines the default auction status
	AuctionStatusNil AuctionStatus = 0
	// AUCTION_STATUS_STARTED defines the started auction status
	AuctionStatusStarted AuctionStatus = 1
	// AUCTION_STATUS_FINISHED defines the finished auction status
	AuctionStatusFinished AuctionStatus = 2
	// AUCTION_STATUS_SKIPPED defines the skipped auction status
	AuctionStatusSkipped AuctionStatus = 3
)

var AuctionStatus_name = map[int32]string{
	0: "AUCTION_STATUS_UNSPECIFIED",
	1: "AUCTION_STATUS_STARTED",
	2: "AUCTION_STATUS_FINISHED",
	3: "AUCTION_STATUS_SKIPPED",
}

var AuctionStatus_value = map[string]int32{
	"AUCTION_STATUS_UNSPECIFIED": 0,
	"AUCTION_STATUS_STARTED":     1,
	"AUCTION_STATUS_FINISHED":    2,
	"AUCTION_STATUS_SKIPPED":     3,
}

func (x AuctionStatus) String() string {
	return proto.EnumName(AuctionStatus_name, int32(x))
}

func (AuctionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b249c3299801097b, []int{0}
}

// PublicPosition defines public position object that provides auto compounding functionality
// for the amm position and undergoes rewards auction process.
// See the technical spec for more detailed information.
type PublicPosition struct {
	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PoolId    uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	LowerTick int32  `protobuf:"varint,3,opt,name=lower_tick,json=lowerTick,proto3" json:"lower_tick,omitempty"`
	UpperTick int32  `protobuf:"varint,4,opt,name=upper_tick,json=upperTick,proto3" json:"upper_tick,omitempty"`
	// bid_reserve_address specifies the account that reserves bidding amounts placed by bidders
	BidReserveAddress    string                                 `protobuf:"bytes,5,opt,name=bid_reserve_address,json=bidReserveAddress,proto3" json:"bid_reserve_address,omitempty"`
	FeeRate              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=fee_rate,json=feeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_rate"`
	LastRewardsAuctionId uint64                                 `protobuf:"varint,7,opt,name=last_rewards_auction_id,json=lastRewardsAuctionId,proto3" json:"last_rewards_auction_id,omitempty"`
}

func (m *PublicPosition) Reset()         { *m = PublicPosition{} }
func (m *PublicPosition) String() string { return proto.CompactTextString(m) }
func (*PublicPosition) ProtoMessage()    {}
func (*PublicPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_b249c3299801097b, []int{0}
}
func (m *PublicPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicPosition.Merge(m, src)
}
func (m *PublicPosition) XXX_Size() int {
	return m.Size()
}
func (m *PublicPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicPosition.DiscardUnknown(m)
}

var xxx_messageInfo_PublicPosition proto.InternalMessageInfo

// RewardsAuction defines rewards auction that is created by the module
// for every rewards_auction_duration in params.
type RewardsAuction struct {
	// public_position_id specifies the public position's id.
	PublicPositionId uint64 `protobuf:"varint,1,opt,name=public_position_id,json=publicPositionId,proto3" json:"public_position_id,omitempty"`
	// id specifies the unique auction id in the public position
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// start_time specifies the start time of an auction
	StartTime time.Time `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// end_time specifies the end time of an auction
	EndTime time.Time `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// status specifies the status of an auction
	Status AuctionStatus `protobuf:"varint,5,opt,name=status,proto3,enum=crescent.liquidamm.v1beta1.AuctionStatus" json:"status,omitempty"`
	// winning_bid specifies the winning bid
	WinningBid *Bid `protobuf:"bytes,6,opt,name=winning_bid,json=winningBid,proto3" json:"winning_bid,omitempty"`
	// rewards specifies the rewards the winning bidder has received
	// the value is determined when an auction is finished
	Rewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
	Fees    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=fees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fees"`
}

func (m *RewardsAuction) Reset()         { *m = RewardsAuction{} }
func (m *RewardsAuction) String() string { return proto.CompactTextString(m) }
func (*RewardsAuction) ProtoMessage()    {}
func (*RewardsAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_b249c3299801097b, []int{1}
}
func (m *RewardsAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsAuction.Merge(m, src)
}
func (m *RewardsAuction) XXX_Size() int {
	return m.Size()
}
func (m *RewardsAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsAuction.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsAuction proto.InternalMessageInfo

// Bid defines standard bid for a rewards auction.
type Bid struct {
	// public_position_id specifies the public position's id
	PublicPositionId uint64 `protobuf:"varint,1,opt,name=public_position_id,json=publicPositionId,proto3" json:"public_position_id,omitempty"`
	// rewards_auction_id specifies the reward auction's id
	RewardsAuctionId uint64 `protobuf:"varint,2,opt,name=rewards_auction_id,json=rewardsAuctionId,proto3" json:"rewards_auction_id,omitempty"`
	// bidder specifies the bech32-encoded address that places a bid for the auction
	Bidder string `protobuf:"bytes,3,opt,name=bidder,proto3" json:"bidder,omitempty"`
	// share specifies the share amount to place a bid
	Share types.Coin `protobuf:"bytes,4,opt,name=share,proto3" json:"share"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_b249c3299801097b, []int{2}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("crescent.liquidamm.v1beta1.AuctionStatus", AuctionStatus_name, AuctionStatus_value)
	proto.RegisterType((*PublicPosition)(nil), "crescent.liquidamm.v1beta1.PublicPosition")
	proto.RegisterType((*RewardsAuction)(nil), "crescent.liquidamm.v1beta1.RewardsAuction")
	proto.RegisterType((*Bid)(nil), "crescent.liquidamm.v1beta1.Bid")
}

func init() {
	proto.RegisterFile("crescent/liquidamm/v1beta1/liquidamm.proto", fileDescriptor_b249c3299801097b)
}

var fileDescriptor_b249c3299801097b = []byte{
	// 784 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xf3, 0x44,
	0x14, 0x8d, 0x93, 0x34, 0x3f, 0x13, 0x11, 0x85, 0x21, 0x7c, 0x75, 0x2d, 0xe1, 0x44, 0x5d, 0xa0,
	0xf0, 0xa9, 0xb5, 0x69, 0x68, 0x91, 0x58, 0x41, 0xfe, 0x2a, 0x2c, 0xa4, 0x10, 0x39, 0xa9, 0x90,
	0xd8, 0x58, 0xb6, 0x67, 0x92, 0x8e, 0x92, 0x78, 0x8c, 0x67, 0xd2, 0xc0, 0x1b, 0xa0, 0xae, 0xfa,
	0x02, 0x5d, 0x20, 0x56, 0xb0, 0xe2, 0x31, 0xba, 0xec, 0x12, 0xb1, 0x68, 0xa1, 0x7d, 0x00, 0x5e,
	0x01, 0xcd, 0xd8, 0x49, 0x9b, 0xaa, 0x54, 0x54, 0x62, 0x95, 0xdc, 0x7b, 0xee, 0xb9, 0xa3, 0x7b,
	0xce, 0x49, 0xc0, 0x5b, 0x3f, 0xc2, 0xcc, 0xc7, 0x01, 0x37, 0x67, 0xe4, 0xbb, 0x05, 0x41, 0xee,
	0x7c, 0x6e, 0x9e, 0x1d, 0x78, 0x98, 0xbb, 0x07, 0x0f, 0x1d, 0x23, 0x8c, 0x28, 0xa7, 0x50, 0x5b,
	0xcd, 0x1a, 0x0f, 0x48, 0x32, 0xab, 0x55, 0x27, 0x74, 0x42, 0xe5, 0x98, 0x29, 0xbe, 0xc5, 0x0c,
	0x6d, 0xc7, 0xa7, 0x6c, 0x4e, 0x99, 0x13, 0x03, 0x71, 0x91, 0x40, 0x7a, 0x5c, 0x99, 0x9e, 0xcb,
	0xf0, 0xfa, 0x45, 0x9f, 0x92, 0x20, 0xc1, 0x6b, 0x13, 0x4a, 0x27, 0x33, 0x6c, 0xca, 0xca, 0x5b,
	0x8c, 0x4d, 0x4e, 0xe6, 0x98, 0x71, 0x77, 0x1e, 0xc6, 0x03, 0xbb, 0xbf, 0xa4, 0x41, 0x79, 0xb0,
	0xf0, 0x66, 0xc4, 0x1f, 0x50, 0x46, 0x38, 0xa1, 0x01, 0x2c, 0x83, 0x34, 0x41, 0xaa, 0x52, 0x57,
	0x1a, 0x59, 0x3b, 0x4d, 0x10, 0xdc, 0x06, 0xf9, 0x90, 0xd2, 0x99, 0x43, 0x90, 0x9a, 0x96, 0xcd,
	0x9c, 0x28, 0x2d, 0x04, 0x3f, 0x00, 0x60, 0x46, 0x97, 0x38, 0x72, 0x38, 0xf1, 0xa7, 0x6a, 0xa6,
	0xae, 0x34, 0xb6, 0xec, 0xa2, 0xec, 0x8c, 0x88, 0x3f, 0x15, 0xf0, 0x22, 0x0c, 0x57, 0x70, 0x36,
	0x86, 0x65, 0x47, 0xc2, 0x06, 0x78, 0xcf, 0x23, 0xc8, 0x89, 0x30, 0xc3, 0xd1, 0x19, 0x76, 0x5c,
	0x84, 0x22, 0xcc, 0x98, 0xba, 0x55, 0x57, 0x1a, 0x45, 0xfb, 0x5d, 0x8f, 0x20, 0x3b, 0x46, 0x5a,
	0x31, 0x00, 0x2d, 0x50, 0x18, 0x63, 0xec, 0x44, 0x2e, 0xc7, 0x6a, 0x4e, 0x0c, 0xb5, 0x8d, 0xab,
	0x9b, 0x5a, 0xea, 0x8f, 0x9b, 0xda, 0x87, 0x13, 0xc2, 0x4f, 0x17, 0x9e, 0xe1, 0xd3, 0x79, 0xa2,
	0x4e, 0xf2, 0xb1, 0xcf, 0xd0, 0xd4, 0xe4, 0x3f, 0x84, 0x98, 0x19, 0x5d, 0xec, 0xdb, 0xf9, 0x31,
	0xc6, 0xb6, 0xcb, 0x31, 0x3c, 0x02, 0xdb, 0x33, 0x97, 0x71, 0x27, 0xc2, 0x4b, 0x37, 0x42, 0xcc,
	0x71, 0x17, 0xbe, 0xb8, 0x5c, 0x5c, 0x98, 0x97, 0x17, 0x56, 0x05, 0x6c, 0xc7, 0x68, 0x2b, 0x06,
	0x2d, 0xb4, 0xfb, 0x53, 0x16, 0x94, 0x37, 0x9b, 0x70, 0x0f, 0xc0, 0x50, 0xaa, 0xe7, 0x84, 0x89,
	0x7c, 0xce, 0x5a, 0xbb, 0x4a, 0xb8, 0xa1, 0xab, 0x85, 0x12, 0x65, 0xd3, 0x6b, 0x65, 0x3b, 0x00,
	0x30, 0xee, 0x46, 0xdc, 0x11, 0xae, 0x48, 0x01, 0x4b, 0x4d, 0xcd, 0x88, 0x2d, 0x33, 0x56, 0x96,
	0x19, 0xa3, 0x95, 0x65, 0xed, 0x82, 0x38, 0xf8, 0xe2, 0xb6, 0xa6, 0xd8, 0x45, 0xc9, 0x13, 0x08,
	0xfc, 0x1c, 0x14, 0x70, 0x80, 0xe2, 0x15, 0xd9, 0x57, 0xac, 0xc8, 0xe3, 0x00, 0xc9, 0x05, 0x2d,
	0x90, 0x63, 0xdc, 0xe5, 0x8b, 0x58, 0xfb, 0x72, 0xf3, 0x23, 0xe3, 0xdf, 0x13, 0x6a, 0x24, 0x87,
	0x0f, 0x25, 0xc1, 0x4e, 0x88, 0xf0, 0x0b, 0x50, 0x5a, 0x92, 0x20, 0x20, 0xc1, 0xc4, 0xf1, 0x08,
	0x92, 0xf6, 0x94, 0x9a, 0xb5, 0x97, 0xf6, 0xb4, 0x09, 0xb2, 0x41, 0xc2, 0x69, 0x13, 0x04, 0x31,
	0xc8, 0x27, 0x6e, 0xa8, 0xf9, 0x7a, 0xa6, 0x51, 0x6a, 0xee, 0x18, 0x49, 0xd0, 0x45, 0xb4, 0xd7,
	0xb4, 0x0e, 0x25, 0x41, 0xfb, 0x63, 0x71, 0xc3, 0xaf, 0xb7, 0xb5, 0xc6, 0x7f, 0xf0, 0x5d, 0x10,
	0x98, 0xbd, 0xda, 0x0d, 0x1d, 0x90, 0x1d, 0x63, 0xcc, 0xd4, 0xc2, 0xff, 0xff, 0x86, 0x5c, 0xbc,
	0xfb, 0x9b, 0x02, 0x32, 0xe2, 0x9e, 0xd7, 0x05, 0x63, 0x0f, 0xc0, 0x67, 0xb2, 0x18, 0x07, 0xa5,
	0x12, 0x3d, 0xc9, 0x21, 0x7c, 0x03, 0x72, 0x1e, 0x41, 0x08, 0x47, 0x32, 0x32, 0x45, 0x3b, 0xa9,
	0xe0, 0x11, 0xd8, 0x62, 0xa7, 0x6e, 0xb4, 0x8a, 0xc1, 0x0b, 0xd7, 0x65, 0xc5, 0x75, 0x76, 0x3c,
	0xfd, 0xf6, 0x6f, 0x05, 0xbc, 0xb3, 0x61, 0x2b, 0x3c, 0x04, 0x5a, 0xeb, 0xa4, 0x33, 0xb2, 0xbe,
	0xee, 0x3b, 0xc3, 0x51, 0x6b, 0x74, 0x32, 0x74, 0x4e, 0xfa, 0xc3, 0x41, 0xaf, 0x63, 0x1d, 0x5b,
	0xbd, 0x6e, 0x25, 0xa5, 0x55, 0xcf, 0x2f, 0xeb, 0x95, 0x0d, 0x4a, 0x9f, 0xcc, 0xe0, 0x21, 0x78,
	0xf3, 0x84, 0x35, 0x1c, 0xb5, 0xec, 0x51, 0xaf, 0x5b, 0x51, 0x34, 0xf5, 0xfc, 0xb2, 0x5e, 0xdd,
	0x60, 0x0c, 0x45, 0x80, 0x31, 0x82, 0x9f, 0x82, 0xed, 0x27, 0xac, 0x63, 0xab, 0x6f, 0x0d, 0xbf,
	0xec, 0x75, 0x2b, 0x69, 0x6d, 0xe7, 0xfc, 0xb2, 0xfe, 0xfe, 0x06, 0xed, 0x98, 0x04, 0x84, 0x9d,
	0x62, 0xf4, 0xdc, 0x6b, 0x5f, 0x59, 0x83, 0x41, 0xaf, 0x5b, 0xc9, 0x3c, 0xf7, 0xda, 0x94, 0x84,
	0x21, 0x46, 0x5a, 0xf6, 0xc7, 0x9f, 0xf5, 0x54, 0xfb, 0x9b, 0xab, 0xbf, 0xf4, 0xd4, 0xd5, 0x9d,
	0xae, 0x5c, 0xdf, 0xe9, 0xca, 0x9f, 0x77, 0xba, 0x72, 0x71, 0xaf, 0xa7, 0xae, 0xef, 0xf5, 0xd4,
	0xef, 0xf7, 0x7a, 0xea, 0xdb, 0xcf, 0x1e, 0x5b, 0x9e, 0x24, 0x78, 0x3f, 0xc0, 0x7c, 0x49, 0xa3,
	0xe9, 0xba, 0x61, 0x9e, 0x1d, 0x99, 0xdf, 0x3f, 0xfa, 0xb7, 0x97, 0x49, 0xf0, 0x72, 0xf2, 0x17,
	0xf7, 0xc9, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x74, 0x5e, 0x9c, 0x10, 0x06, 0x00, 0x00,
}

func (m *PublicPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastRewardsAuctionId != 0 {
		i = encodeVarintLiquidamm(dAtA, i, uint64(m.LastRewardsAuctionId))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.FeeRate.Size()
		i -= size
		if _, err := m.FeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidamm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.BidReserveAddress) > 0 {
		i -= len(m.BidReserveAddress)
		copy(dAtA[i:], m.BidReserveAddress)
		i = encodeVarintLiquidamm(dAtA, i, uint64(len(m.BidReserveAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UpperTick != 0 {
		i = encodeVarintLiquidamm(dAtA, i, uint64(m.UpperTick))
		i--
		dAtA[i] = 0x20
	}
	if m.LowerTick != 0 {
		i = encodeVarintLiquidamm(dAtA, i, uint64(m.LowerTick))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintLiquidamm(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiquidamm(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidamm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidamm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.WinningBid != nil {
		{
			size, err := m.WinningBid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiquidamm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintLiquidamm(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLiquidamm(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintLiquidamm(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1a
	if m.Id != 0 {
		i = encodeVarintLiquidamm(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.PublicPositionId != 0 {
		i = encodeVarintLiquidamm(dAtA, i, uint64(m.PublicPositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Share.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidamm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintLiquidamm(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RewardsAuctionId != 0 {
		i = encodeVarintLiquidamm(dAtA, i, uint64(m.RewardsAuctionId))
		i--
		dAtA[i] = 0x10
	}
	if m.PublicPositionId != 0 {
		i = encodeVarintLiquidamm(dAtA, i, uint64(m.PublicPositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidamm(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidamm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PublicPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidamm(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovLiquidamm(uint64(m.PoolId))
	}
	if m.LowerTick != 0 {
		n += 1 + sovLiquidamm(uint64(m.LowerTick))
	}
	if m.UpperTick != 0 {
		n += 1 + sovLiquidamm(uint64(m.UpperTick))
	}
	l = len(m.BidReserveAddress)
	if l > 0 {
		n += 1 + l + sovLiquidamm(uint64(l))
	}
	l = m.FeeRate.Size()
	n += 1 + l + sovLiquidamm(uint64(l))
	if m.LastRewardsAuctionId != 0 {
		n += 1 + sovLiquidamm(uint64(m.LastRewardsAuctionId))
	}
	return n
}

func (m *RewardsAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicPositionId != 0 {
		n += 1 + sovLiquidamm(uint64(m.PublicPositionId))
	}
	if m.Id != 0 {
		n += 1 + sovLiquidamm(uint64(m.Id))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovLiquidamm(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovLiquidamm(uint64(l))
	if m.Status != 0 {
		n += 1 + sovLiquidamm(uint64(m.Status))
	}
	if m.WinningBid != nil {
		l = m.WinningBid.Size()
		n += 1 + l + sovLiquidamm(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovLiquidamm(uint64(l))
		}
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovLiquidamm(uint64(l))
		}
	}
	return n
}

func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicPositionId != 0 {
		n += 1 + sovLiquidamm(uint64(m.PublicPositionId))
	}
	if m.RewardsAuctionId != 0 {
		n += 1 + sovLiquidamm(uint64(m.RewardsAuctionId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovLiquidamm(uint64(l))
	}
	l = m.Share.Size()
	n += 1 + l + sovLiquidamm(uint64(l))
	return n
}

func sovLiquidamm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidamm(x uint64) (n int) {
	return sovLiquidamm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PublicPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidamm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerTick", wireType)
			}
			m.LowerTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerTick |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperTick", wireType)
			}
			m.UpperTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperTick |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidamm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidamm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRewardsAuctionId", wireType)
			}
			m.LastRewardsAuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRewardsAuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidamm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidamm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidamm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicPositionId", wireType)
			}
			m.PublicPositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicPositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidamm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidamm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AuctionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidamm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WinningBid == nil {
				m.WinningBid = &Bid{}
			}
			if err := m.WinningBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidamm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidamm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, types.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidamm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidamm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidamm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicPositionId", wireType)
			}
			m.PublicPositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicPositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsAuctionId", wireType)
			}
			m.RewardsAuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsAuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidamm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidamm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidamm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidamm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidamm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidamm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidamm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidamm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidamm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidamm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidamm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidamm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidamm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidamm = fmt.Errorf("proto: unexpected end of group")
)
