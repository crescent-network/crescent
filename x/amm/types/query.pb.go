// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/amm/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	github_com_crescent_network_crescent_cremath "github.com/crescent-network/crescent/cremath"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

type QueryAllPoolsRequest struct {
	MarketId   uint64             `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolsRequest) Reset()         { *m = QueryAllPoolsRequest{} }
func (m *QueryAllPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolsRequest) ProtoMessage()    {}
func (*QueryAllPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{2}
}
func (m *QueryAllPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolsRequest.Merge(m, src)
}
func (m *QueryAllPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolsRequest proto.InternalMessageInfo

type QueryAllPoolsResponse struct {
	Pools      []PoolResponse      `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolsResponse) Reset()         { *m = QueryAllPoolsResponse{} }
func (m *QueryAllPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolsResponse) ProtoMessage()    {}
func (*QueryAllPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{3}
}
func (m *QueryAllPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolsResponse.Merge(m, src)
}
func (m *QueryAllPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolsResponse proto.InternalMessageInfo

type QueryPoolRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryPoolRequest) Reset()         { *m = QueryPoolRequest{} }
func (m *QueryPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRequest) ProtoMessage()    {}
func (*QueryPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{4}
}
func (m *QueryPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRequest.Merge(m, src)
}
func (m *QueryPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRequest proto.InternalMessageInfo

type QueryPoolResponse struct {
	Pool PoolResponse `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool"`
}

func (m *QueryPoolResponse) Reset()         { *m = QueryPoolResponse{} }
func (m *QueryPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolResponse) ProtoMessage()    {}
func (*QueryPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{5}
}
func (m *QueryPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolResponse.Merge(m, src)
}
func (m *QueryPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolResponse proto.InternalMessageInfo

type QueryAllPositionsRequest struct {
	PoolId     uint64             `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Owner      string             `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPositionsRequest) Reset()         { *m = QueryAllPositionsRequest{} }
func (m *QueryAllPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPositionsRequest) ProtoMessage()    {}
func (*QueryAllPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{6}
}
func (m *QueryAllPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPositionsRequest.Merge(m, src)
}
func (m *QueryAllPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPositionsRequest proto.InternalMessageInfo

type QueryAllPositionsResponse struct {
	Positions  []PositionResponse  `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPositionsResponse) Reset()         { *m = QueryAllPositionsResponse{} }
func (m *QueryAllPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPositionsResponse) ProtoMessage()    {}
func (*QueryAllPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{7}
}
func (m *QueryAllPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPositionsResponse.Merge(m, src)
}
func (m *QueryAllPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPositionsResponse proto.InternalMessageInfo

type QueryPositionRequest struct {
	PositionId uint64 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *QueryPositionRequest) Reset()         { *m = QueryPositionRequest{} }
func (m *QueryPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionRequest) ProtoMessage()    {}
func (*QueryPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{8}
}
func (m *QueryPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionRequest.Merge(m, src)
}
func (m *QueryPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionRequest proto.InternalMessageInfo

type QueryPositionResponse struct {
	Position PositionResponse `protobuf:"bytes,1,opt,name=position,proto3" json:"position"`
}

func (m *QueryPositionResponse) Reset()         { *m = QueryPositionResponse{} }
func (m *QueryPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionResponse) ProtoMessage()    {}
func (*QueryPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{9}
}
func (m *QueryPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionResponse.Merge(m, src)
}
func (m *QueryPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionResponse proto.InternalMessageInfo

type QueryPositionAssetsRequest struct {
	PositionId uint64 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *QueryPositionAssetsRequest) Reset()         { *m = QueryPositionAssetsRequest{} }
func (m *QueryPositionAssetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionAssetsRequest) ProtoMessage()    {}
func (*QueryPositionAssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{10}
}
func (m *QueryPositionAssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionAssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionAssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionAssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionAssetsRequest.Merge(m, src)
}
func (m *QueryPositionAssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionAssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionAssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionAssetsRequest proto.InternalMessageInfo

type QueryPositionAssetsResponse struct {
	Coin0 types.Coin `protobuf:"bytes,1,opt,name=coin0,proto3" json:"coin0"`
	Coin1 types.Coin `protobuf:"bytes,2,opt,name=coin1,proto3" json:"coin1"`
}

func (m *QueryPositionAssetsResponse) Reset()         { *m = QueryPositionAssetsResponse{} }
func (m *QueryPositionAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionAssetsResponse) ProtoMessage()    {}
func (*QueryPositionAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{11}
}
func (m *QueryPositionAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionAssetsResponse.Merge(m, src)
}
func (m *QueryPositionAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionAssetsResponse proto.InternalMessageInfo

type QuerySimulateAddLiquidityRequest struct {
	PoolId        uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	LowerPrice    string `protobuf:"bytes,2,opt,name=lower_price,json=lowerPrice,proto3" json:"lower_price,omitempty"`
	UpperPrice    string `protobuf:"bytes,3,opt,name=upper_price,json=upperPrice,proto3" json:"upper_price,omitempty"`
	DesiredAmount string `protobuf:"bytes,4,opt,name=desired_amount,json=desiredAmount,proto3" json:"desired_amount,omitempty"`
}

func (m *QuerySimulateAddLiquidityRequest) Reset()         { *m = QuerySimulateAddLiquidityRequest{} }
func (m *QuerySimulateAddLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateAddLiquidityRequest) ProtoMessage()    {}
func (*QuerySimulateAddLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{12}
}
func (m *QuerySimulateAddLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateAddLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateAddLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateAddLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateAddLiquidityRequest.Merge(m, src)
}
func (m *QuerySimulateAddLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateAddLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateAddLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateAddLiquidityRequest proto.InternalMessageInfo

type QuerySimulateAddLiquidityResponse struct {
	Liquidity github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,1,opt,name=liquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"liquidity"`
	Amount    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *QuerySimulateAddLiquidityResponse) Reset()         { *m = QuerySimulateAddLiquidityResponse{} }
func (m *QuerySimulateAddLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateAddLiquidityResponse) ProtoMessage()    {}
func (*QuerySimulateAddLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{13}
}
func (m *QuerySimulateAddLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateAddLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateAddLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateAddLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateAddLiquidityResponse.Merge(m, src)
}
func (m *QuerySimulateAddLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateAddLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateAddLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateAddLiquidityResponse proto.InternalMessageInfo

type QuerySimulateRemoveLiquidityRequest struct {
	PositionId uint64 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	Liquidity  string `protobuf:"bytes,2,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
}

func (m *QuerySimulateRemoveLiquidityRequest) Reset()         { *m = QuerySimulateRemoveLiquidityRequest{} }
func (m *QuerySimulateRemoveLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateRemoveLiquidityRequest) ProtoMessage()    {}
func (*QuerySimulateRemoveLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{14}
}
func (m *QuerySimulateRemoveLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateRemoveLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateRemoveLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateRemoveLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateRemoveLiquidityRequest.Merge(m, src)
}
func (m *QuerySimulateRemoveLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateRemoveLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateRemoveLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateRemoveLiquidityRequest proto.InternalMessageInfo

type QuerySimulateRemoveLiquidityResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *QuerySimulateRemoveLiquidityResponse) Reset()         { *m = QuerySimulateRemoveLiquidityResponse{} }
func (m *QuerySimulateRemoveLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateRemoveLiquidityResponse) ProtoMessage()    {}
func (*QuerySimulateRemoveLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{15}
}
func (m *QuerySimulateRemoveLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateRemoveLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateRemoveLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateRemoveLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateRemoveLiquidityResponse.Merge(m, src)
}
func (m *QuerySimulateRemoveLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateRemoveLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateRemoveLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateRemoveLiquidityResponse proto.InternalMessageInfo

type QueryCollectibleCoinsRequest struct {
	Owner      string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	PositionId uint64 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *QueryCollectibleCoinsRequest) Reset()         { *m = QueryCollectibleCoinsRequest{} }
func (m *QueryCollectibleCoinsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollectibleCoinsRequest) ProtoMessage()    {}
func (*QueryCollectibleCoinsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{16}
}
func (m *QueryCollectibleCoinsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectibleCoinsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectibleCoinsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectibleCoinsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectibleCoinsRequest.Merge(m, src)
}
func (m *QueryCollectibleCoinsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectibleCoinsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectibleCoinsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectibleCoinsRequest proto.InternalMessageInfo

type QueryCollectibleCoinsResponse struct {
	Fee            github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=fee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee"`
	FarmingRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=farming_rewards,json=farmingRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"farming_rewards"`
}

func (m *QueryCollectibleCoinsResponse) Reset()         { *m = QueryCollectibleCoinsResponse{} }
func (m *QueryCollectibleCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollectibleCoinsResponse) ProtoMessage()    {}
func (*QueryCollectibleCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{17}
}
func (m *QueryCollectibleCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectibleCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectibleCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectibleCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectibleCoinsResponse.Merge(m, src)
}
func (m *QueryCollectibleCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectibleCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectibleCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectibleCoinsResponse proto.InternalMessageInfo

type QueryAllTickInfosRequest struct {
	PoolId     uint64             `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	LowerTick  string             `protobuf:"bytes,2,opt,name=lower_tick,json=lowerTick,proto3" json:"lower_tick,omitempty"`
	UpperTick  string             `protobuf:"bytes,3,opt,name=upper_tick,json=upperTick,proto3" json:"upper_tick,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTickInfosRequest) Reset()         { *m = QueryAllTickInfosRequest{} }
func (m *QueryAllTickInfosRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTickInfosRequest) ProtoMessage()    {}
func (*QueryAllTickInfosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{18}
}
func (m *QueryAllTickInfosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTickInfosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTickInfosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTickInfosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTickInfosRequest.Merge(m, src)
}
func (m *QueryAllTickInfosRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTickInfosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTickInfosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTickInfosRequest proto.InternalMessageInfo

type QueryAllTickInfosResponse struct {
	TickInfos  []TickInfoResponse  `protobuf:"bytes,1,rep,name=tick_infos,json=tickInfos,proto3" json:"tick_infos"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTickInfosResponse) Reset()         { *m = QueryAllTickInfosResponse{} }
func (m *QueryAllTickInfosResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTickInfosResponse) ProtoMessage()    {}
func (*QueryAllTickInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{19}
}
func (m *QueryAllTickInfosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTickInfosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTickInfosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTickInfosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTickInfosResponse.Merge(m, src)
}
func (m *QueryAllTickInfosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTickInfosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTickInfosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTickInfosResponse proto.InternalMessageInfo

type QueryTickInfoRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Tick   int32  `protobuf:"varint,2,opt,name=tick,proto3" json:"tick,omitempty"`
}

func (m *QueryTickInfoRequest) Reset()         { *m = QueryTickInfoRequest{} }
func (m *QueryTickInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTickInfoRequest) ProtoMessage()    {}
func (*QueryTickInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{20}
}
func (m *QueryTickInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTickInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTickInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTickInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTickInfoRequest.Merge(m, src)
}
func (m *QueryTickInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTickInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTickInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTickInfoRequest proto.InternalMessageInfo

type QueryTickInfoResponse struct {
	TickInfo TickInfoResponse `protobuf:"bytes,1,opt,name=tick_info,json=tickInfo,proto3" json:"tick_info"`
}

func (m *QueryTickInfoResponse) Reset()         { *m = QueryTickInfoResponse{} }
func (m *QueryTickInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTickInfoResponse) ProtoMessage()    {}
func (*QueryTickInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{21}
}
func (m *QueryTickInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTickInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTickInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTickInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTickInfoResponse.Merge(m, src)
}
func (m *QueryTickInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTickInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTickInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTickInfoResponse proto.InternalMessageInfo

type QueryAllFarmingPlansRequest struct {
	IsPrivate    string             `protobuf:"bytes,1,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	IsTerminated string             `protobuf:"bytes,2,opt,name=is_terminated,json=isTerminated,proto3" json:"is_terminated,omitempty"`
	Pagination   *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFarmingPlansRequest) Reset()         { *m = QueryAllFarmingPlansRequest{} }
func (m *QueryAllFarmingPlansRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFarmingPlansRequest) ProtoMessage()    {}
func (*QueryAllFarmingPlansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{22}
}
func (m *QueryAllFarmingPlansRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFarmingPlansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFarmingPlansRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFarmingPlansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFarmingPlansRequest.Merge(m, src)
}
func (m *QueryAllFarmingPlansRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFarmingPlansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFarmingPlansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFarmingPlansRequest proto.InternalMessageInfo

type QueryAllFarmingPlansResponse struct {
	FarmingPlans []FarmingPlan       `protobuf:"bytes,1,rep,name=farming_plans,json=farmingPlans,proto3" json:"farming_plans"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFarmingPlansResponse) Reset()         { *m = QueryAllFarmingPlansResponse{} }
func (m *QueryAllFarmingPlansResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFarmingPlansResponse) ProtoMessage()    {}
func (*QueryAllFarmingPlansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{23}
}
func (m *QueryAllFarmingPlansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFarmingPlansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFarmingPlansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFarmingPlansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFarmingPlansResponse.Merge(m, src)
}
func (m *QueryAllFarmingPlansResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFarmingPlansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFarmingPlansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFarmingPlansResponse proto.InternalMessageInfo

type QueryFarmingPlanRequest struct {
	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (m *QueryFarmingPlanRequest) Reset()         { *m = QueryFarmingPlanRequest{} }
func (m *QueryFarmingPlanRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFarmingPlanRequest) ProtoMessage()    {}
func (*QueryFarmingPlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{24}
}
func (m *QueryFarmingPlanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmingPlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmingPlanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmingPlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmingPlanRequest.Merge(m, src)
}
func (m *QueryFarmingPlanRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmingPlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmingPlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmingPlanRequest proto.InternalMessageInfo

type QueryFarmingPlanResponse struct {
	FarmingPlan FarmingPlan `protobuf:"bytes,1,opt,name=farming_plan,json=farmingPlan,proto3" json:"farming_plan"`
}

func (m *QueryFarmingPlanResponse) Reset()         { *m = QueryFarmingPlanResponse{} }
func (m *QueryFarmingPlanResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFarmingPlanResponse) ProtoMessage()    {}
func (*QueryFarmingPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{25}
}
func (m *QueryFarmingPlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmingPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmingPlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmingPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmingPlanResponse.Merge(m, src)
}
func (m *QueryFarmingPlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmingPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmingPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmingPlanResponse proto.InternalMessageInfo

type PoolResponse struct {
	Id                         uint64                                              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MarketId                   uint64                                              `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Balance0                   types.Coin                                          `protobuf:"bytes,3,opt,name=balance0,proto3" json:"balance0"`
	Balance1                   types.Coin                                          `protobuf:"bytes,4,opt,name=balance1,proto3" json:"balance1"`
	ReserveAddress             string                                              `protobuf:"bytes,5,opt,name=reserve_address,json=reserveAddress,proto3" json:"reserve_address,omitempty"`
	RewardsPool                string                                              `protobuf:"bytes,6,opt,name=rewards_pool,json=rewardsPool,proto3" json:"rewards_pool,omitempty"`
	TickSpacing                uint32                                              `protobuf:"varint,7,opt,name=tick_spacing,json=tickSpacing,proto3" json:"tick_spacing,omitempty"`
	CurrentTick                int32                                               `protobuf:"varint,8,opt,name=current_tick,json=currentTick,proto3" json:"current_tick,omitempty"`
	CurrentSqrtPrice           github_com_crescent_network_crescent_cremath.BigDec `protobuf:"bytes,9,opt,name=current_sqrt_price,json=currentSqrtPrice,proto3,customtype=github.com/crescent-network/crescent/cremath.BigDec" json:"current_sqrt_price"`
	CurrentLiquidity           github_com_cosmos_cosmos_sdk_types.Int              `protobuf:"bytes,10,opt,name=current_liquidity,json=currentLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"current_liquidity"`
	TotalLiquidity             github_com_cosmos_cosmos_sdk_types.Int              `protobuf:"bytes,11,opt,name=total_liquidity,json=totalLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_liquidity"`
	FeeGrowthGlobal            github_com_cosmos_cosmos_sdk_types.DecCoins         `protobuf:"bytes,12,rep,name=fee_growth_global,json=feeGrowthGlobal,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"fee_growth_global"`
	FarmingRewardsGrowthGlobal github_com_cosmos_cosmos_sdk_types.DecCoins         `protobuf:"bytes,13,rep,name=farming_rewards_growth_global,json=farmingRewardsGrowthGlobal,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"farming_rewards_growth_global"`
}

func (m *PoolResponse) Reset()         { *m = PoolResponse{} }
func (m *PoolResponse) String() string { return proto.CompactTextString(m) }
func (*PoolResponse) ProtoMessage()    {}
func (*PoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{26}
}
func (m *PoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolResponse.Merge(m, src)
}
func (m *PoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *PoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PoolResponse proto.InternalMessageInfo

type PositionResponse struct {
	Id                             uint64                                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PoolId                         uint64                                      `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Owner                          string                                      `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	LowerPrice                     github_com_cosmos_cosmos_sdk_types.Dec      `protobuf:"bytes,4,opt,name=lower_price,json=lowerPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"lower_price"`
	UpperPrice                     github_com_cosmos_cosmos_sdk_types.Dec      `protobuf:"bytes,5,opt,name=upper_price,json=upperPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"upper_price"`
	Liquidity                      github_com_cosmos_cosmos_sdk_types.Int      `protobuf:"bytes,6,opt,name=liquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"liquidity"`
	LastFeeGrowthInside            github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,7,rep,name=last_fee_growth_inside,json=lastFeeGrowthInside,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"last_fee_growth_inside"`
	OwedFee                        github_com_cosmos_cosmos_sdk_types.Coins    `protobuf:"bytes,8,rep,name=owed_fee,json=owedFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"owed_fee"`
	LastFarmingRewardsGrowthInside github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,9,rep,name=last_farming_rewards_growth_inside,json=lastFarmingRewardsGrowthInside,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"last_farming_rewards_growth_inside"`
	OwedFarmingRewards             github_com_cosmos_cosmos_sdk_types.Coins    `protobuf:"bytes,10,rep,name=owed_farming_rewards,json=owedFarmingRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"owed_farming_rewards"`
}

func (m *PositionResponse) Reset()         { *m = PositionResponse{} }
func (m *PositionResponse) String() string { return proto.CompactTextString(m) }
func (*PositionResponse) ProtoMessage()    {}
func (*PositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{27}
}
func (m *PositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionResponse.Merge(m, src)
}
func (m *PositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *PositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PositionResponse proto.InternalMessageInfo

type TickInfoResponse struct {
	Tick                        int32                                       `protobuf:"varint,1,opt,name=tick,proto3" json:"tick,omitempty"`
	GrossLiquidity              github_com_cosmos_cosmos_sdk_types.Int      `protobuf:"bytes,2,opt,name=gross_liquidity,json=grossLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"gross_liquidity"`
	NetLiquidity                github_com_cosmos_cosmos_sdk_types.Int      `protobuf:"bytes,3,opt,name=net_liquidity,json=netLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"net_liquidity"`
	FeeGrowthOutside            github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,4,rep,name=fee_growth_outside,json=feeGrowthOutside,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"fee_growth_outside"`
	FarmingRewardsGrowthOutside github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,5,rep,name=farming_rewards_growth_outside,json=farmingRewardsGrowthOutside,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"farming_rewards_growth_outside"`
}

func (m *TickInfoResponse) Reset()         { *m = TickInfoResponse{} }
func (m *TickInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TickInfoResponse) ProtoMessage()    {}
func (*TickInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4c6a0c012683a24, []int{28}
}
func (m *TickInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickInfoResponse.Merge(m, src)
}
func (m *TickInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TickInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TickInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TickInfoResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "crescent.amm.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "crescent.amm.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryAllPoolsRequest)(nil), "crescent.amm.v1beta1.QueryAllPoolsRequest")
	proto.RegisterType((*QueryAllPoolsResponse)(nil), "crescent.amm.v1beta1.QueryAllPoolsResponse")
	proto.RegisterType((*QueryPoolRequest)(nil), "crescent.amm.v1beta1.QueryPoolRequest")
	proto.RegisterType((*QueryPoolResponse)(nil), "crescent.amm.v1beta1.QueryPoolResponse")
	proto.RegisterType((*QueryAllPositionsRequest)(nil), "crescent.amm.v1beta1.QueryAllPositionsRequest")
	proto.RegisterType((*QueryAllPositionsResponse)(nil), "crescent.amm.v1beta1.QueryAllPositionsResponse")
	proto.RegisterType((*QueryPositionRequest)(nil), "crescent.amm.v1beta1.QueryPositionRequest")
	proto.RegisterType((*QueryPositionResponse)(nil), "crescent.amm.v1beta1.QueryPositionResponse")
	proto.RegisterType((*QueryPositionAssetsRequest)(nil), "crescent.amm.v1beta1.QueryPositionAssetsRequest")
	proto.RegisterType((*QueryPositionAssetsResponse)(nil), "crescent.amm.v1beta1.QueryPositionAssetsResponse")
	proto.RegisterType((*QuerySimulateAddLiquidityRequest)(nil), "crescent.amm.v1beta1.QuerySimulateAddLiquidityRequest")
	proto.RegisterType((*QuerySimulateAddLiquidityResponse)(nil), "crescent.amm.v1beta1.QuerySimulateAddLiquidityResponse")
	proto.RegisterType((*QuerySimulateRemoveLiquidityRequest)(nil), "crescent.amm.v1beta1.QuerySimulateRemoveLiquidityRequest")
	proto.RegisterType((*QuerySimulateRemoveLiquidityResponse)(nil), "crescent.amm.v1beta1.QuerySimulateRemoveLiquidityResponse")
	proto.RegisterType((*QueryCollectibleCoinsRequest)(nil), "crescent.amm.v1beta1.QueryCollectibleCoinsRequest")
	proto.RegisterType((*QueryCollectibleCoinsResponse)(nil), "crescent.amm.v1beta1.QueryCollectibleCoinsResponse")
	proto.RegisterType((*QueryAllTickInfosRequest)(nil), "crescent.amm.v1beta1.QueryAllTickInfosRequest")
	proto.RegisterType((*QueryAllTickInfosResponse)(nil), "crescent.amm.v1beta1.QueryAllTickInfosResponse")
	proto.RegisterType((*QueryTickInfoRequest)(nil), "crescent.amm.v1beta1.QueryTickInfoRequest")
	proto.RegisterType((*QueryTickInfoResponse)(nil), "crescent.amm.v1beta1.QueryTickInfoResponse")
	proto.RegisterType((*QueryAllFarmingPlansRequest)(nil), "crescent.amm.v1beta1.QueryAllFarmingPlansRequest")
	proto.RegisterType((*QueryAllFarmingPlansResponse)(nil), "crescent.amm.v1beta1.QueryAllFarmingPlansResponse")
	proto.RegisterType((*QueryFarmingPlanRequest)(nil), "crescent.amm.v1beta1.QueryFarmingPlanRequest")
	proto.RegisterType((*QueryFarmingPlanResponse)(nil), "crescent.amm.v1beta1.QueryFarmingPlanResponse")
	proto.RegisterType((*PoolResponse)(nil), "crescent.amm.v1beta1.PoolResponse")
	proto.RegisterType((*PositionResponse)(nil), "crescent.amm.v1beta1.PositionResponse")
	proto.RegisterType((*TickInfoResponse)(nil), "crescent.amm.v1beta1.TickInfoResponse")
}

func init() { proto.RegisterFile("crescent/amm/v1beta1/query.proto", fileDescriptor_c4c6a0c012683a24) }

var fileDescriptor_c4c6a0c012683a24 = []byte{
	// 2003 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x4d, 0x6c, 0x1c, 0x59,
	0x11, 0xf6, 0xb3, 0xc7, 0x93, 0x99, 0x1a, 0xff, 0xe5, 0xad, 0x21, 0xb3, 0x13, 0x7b, 0x6c, 0x77,
	0x36, 0xb1, 0x77, 0x83, 0xa7, 0x3d, 0xce, 0x66, 0xc3, 0xfe, 0x00, 0x72, 0xb2, 0x4a, 0x30, 0xac,
	0x14, 0x67, 0xb2, 0x08, 0x09, 0x84, 0x46, 0xed, 0xe9, 0xe7, 0x49, 0xcb, 0x3d, 0xdd, 0xe3, 0xee,
	0x1e, 0x9b, 0x28, 0xb2, 0x90, 0x40, 0x5a, 0x21, 0x71, 0x01, 0x81, 0x10, 0x42, 0x42, 0x42, 0x62,
	0x39, 0x2c, 0xe2, 0x00, 0x42, 0x1c, 0x38, 0x70, 0x0f, 0xb7, 0x45, 0x48, 0x08, 0x71, 0x08, 0x90,
	0x70, 0x43, 0xe2, 0xc4, 0x19, 0xa1, 0xf7, 0x5e, 0xf5, 0xaf, 0x7b, 0x7a, 0x66, 0x8c, 0x7d, 0xca,
	0xa4, 0x5e, 0xfd, 0x7c, 0x55, 0xaf, 0x5e, 0x55, 0x75, 0x19, 0x96, 0x5b, 0x0e, 0x73, 0x5b, 0xcc,
	0xf2, 0x54, 0xad, 0xd3, 0x51, 0x0f, 0xeb, 0xbb, 0xcc, 0xd3, 0xea, 0xea, 0x41, 0x8f, 0x39, 0x8f,
	0x6b, 0x5d, 0xc7, 0xf6, 0x6c, 0x3a, 0xef, 0x73, 0xd4, 0xb4, 0x4e, 0xa7, 0x86, 0x1c, 0x95, 0xf9,
	0xb6, 0xdd, 0xb6, 0x05, 0x83, 0xca, 0x7f, 0x49, 0xde, 0xca, 0x42, 0xdb, 0xb6, 0xdb, 0x26, 0x53,
	0xb5, 0xae, 0xa1, 0x6a, 0x96, 0x65, 0x7b, 0x9a, 0x67, 0xd8, 0x96, 0x8b, 0xa7, 0xd5, 0x54, 0x5b,
	0x5c, 0xab, 0x3c, 0x57, 0x52, 0xcf, 0xf7, 0x34, 0xa7, 0x63, 0x58, 0x6d, 0xe4, 0x59, 0x49, 0xe5,
	0xe9, 0x6a, 0x8e, 0xd6, 0x09, 0xcd, 0xd8, 0x6e, 0xc7, 0x76, 0xd5, 0x5d, 0xcd, 0x65, 0x01, 0x47,
	0xcb, 0x36, 0x2c, 0x3c, 0x7f, 0x2d, 0x7a, 0x2e, 0x3c, 0x8d, 0xe8, 0x69, 0x1b, 0x96, 0xc0, 0x2c,
	0x79, 0x95, 0x79, 0xa0, 0x0f, 0x38, 0xc7, 0x8e, 0x30, 0xd0, 0x60, 0x07, 0x3d, 0xe6, 0x7a, 0xca,
	0x03, 0x78, 0x29, 0x46, 0x75, 0xbb, 0xb6, 0xe5, 0x32, 0xfa, 0x16, 0xe4, 0x25, 0x90, 0x32, 0x59,
	0x26, 0x6b, 0xa5, 0xcd, 0x85, 0x5a, 0x5a, 0xe8, 0x6a, 0x52, 0xea, 0x76, 0xee, 0xe9, 0xb3, 0xa5,
	0xb1, 0x06, 0x4a, 0x28, 0x4f, 0x60, 0x5e, 0xa8, 0xdc, 0x32, 0xcd, 0x1d, 0xdb, 0x36, 0x7d, 0x53,
	0xf4, 0x32, 0x14, 0x3b, 0x9a, 0xb3, 0xcf, 0xbc, 0xa6, 0xa1, 0x0b, 0xb5, 0xb9, 0x46, 0x41, 0x12,
	0xb6, 0x75, 0x7a, 0x17, 0x20, 0x44, 0x5c, 0x1e, 0x17, 0x46, 0xaf, 0xd5, 0xa4, 0x7b, 0x35, 0xee,
	0x5e, 0x4d, 0x5e, 0x64, 0x68, 0xb9, 0xcd, 0x50, 0x71, 0x23, 0x22, 0xa9, 0xfc, 0x94, 0xc0, 0x27,
	0x12, 0xd6, 0xd1, 0xa5, 0xcf, 0xc2, 0x64, 0x97, 0x13, 0xca, 0x64, 0x79, 0x62, 0xad, 0xb4, 0xa9,
	0xf4, 0xf1, 0xc8, 0xb6, 0x4d, 0x5f, 0x04, 0xfd, 0x92, 0x62, 0xf4, 0x5e, 0x0a, 0xc2, 0xd5, 0x81,
	0x08, 0xa5, 0xa6, 0x18, 0xc4, 0xeb, 0x30, 0x27, 0x43, 0x2e, 0x4c, 0xc9, 0xd8, 0x5c, 0x82, 0x0b,
	0xdc, 0x4a, 0x18, 0x99, 0x3c, 0xff, 0xef, 0xb6, 0xae, 0x3c, 0x80, 0x8b, 0x11, 0x66, 0x74, 0xe5,
	0x1d, 0xc8, 0xf1, 0x63, 0xbc, 0x9b, 0xe1, 0x3d, 0x11, 0x52, 0xca, 0xf7, 0x08, 0x94, 0xc3, 0x10,
	0xb9, 0x86, 0xc8, 0xeb, 0x41, 0x40, 0xe8, 0x3c, 0x4c, 0xda, 0x47, 0x16, 0x73, 0x84, 0xe7, 0xc5,
	0x86, 0xfc, 0x4f, 0xe2, 0xda, 0x26, 0x4e, 0x7d, 0x6d, 0xbf, 0x22, 0xf0, 0x72, 0x0a, 0x26, 0xf4,
	0xf7, 0x0b, 0x50, 0xec, 0xfa, 0x44, 0xbc, 0xbe, 0x6b, 0xfd, 0x9c, 0x96, 0x6c, 0x09, 0xc7, 0x43,
	0xf1, 0xb3, 0xbb, 0xc6, 0x5b, 0x98, 0xe6, 0xa1, 0x49, 0x19, 0xc1, 0x25, 0x28, 0xf9, 0xd6, 0xc2,
	0x28, 0x82, 0x4f, 0xda, 0xd6, 0x15, 0x0d, 0x33, 0x34, 0x89, 0x95, 0x7e, 0x1e, 0x0a, 0x3e, 0x1b,
	0x5e, 0xed, 0x68, 0x5e, 0x06, 0xd2, 0xca, 0x67, 0xa0, 0x12, 0x33, 0xb1, 0xe5, 0xba, 0xcc, 0x73,
	0x87, 0x46, 0xf8, 0x1d, 0x02, 0x97, 0x53, 0xe5, 0x11, 0xe8, 0x4d, 0x98, 0xe4, 0x45, 0x68, 0x03,
	0x51, 0xbe, 0x1c, 0x0b, 0x9f, 0x0f, 0xf2, 0x8e, 0x6d, 0x58, 0xfe, 0x0b, 0x12, 0xdc, 0xbe, 0x58,
	0x1d, 0xa3, 0x3e, 0x9c, 0x58, 0x5d, 0xf9, 0x90, 0xc0, 0xb2, 0x40, 0xf3, 0xd0, 0xe8, 0xf4, 0x4c,
	0xcd, 0x63, 0x5b, 0xba, 0xfe, 0x9e, 0x71, 0xd0, 0x33, 0x74, 0xc3, 0x7b, 0x3c, 0x30, 0x6f, 0x97,
	0xa0, 0x64, 0xda, 0x47, 0xcc, 0x69, 0x76, 0x1d, 0xa3, 0xc5, 0x30, 0x7b, 0x41, 0x90, 0x76, 0x38,
	0x85, 0x33, 0xf4, 0xba, 0xdd, 0x80, 0x61, 0x42, 0x32, 0x08, 0x92, 0x64, 0xb8, 0x0a, 0x33, 0x3a,
	0x73, 0x0d, 0x87, 0xe9, 0x4d, 0xad, 0x63, 0xf7, 0x2c, 0xaf, 0x9c, 0x13, 0x3c, 0xd3, 0x48, 0xdd,
	0x12, 0x44, 0xe5, 0xcf, 0x04, 0x56, 0x32, 0x60, 0x62, 0xe8, 0xde, 0x83, 0xa2, 0xe9, 0x13, 0x05,
	0xd2, 0xe2, 0xed, 0x1a, 0x77, 0xf6, 0xaf, 0xcf, 0x96, 0xae, 0xb5, 0x0d, 0xef, 0x51, 0x6f, 0xb7,
	0xd6, 0xb2, 0x3b, 0x2a, 0xd6, 0x75, 0xf9, 0xcf, 0xba, 0xab, 0xef, 0xab, 0xde, 0xe3, 0x2e, 0x73,
	0x6b, 0xdb, 0x96, 0xd7, 0x08, 0x15, 0xd0, 0x16, 0xe4, 0x11, 0xd2, 0xb8, 0x78, 0x15, 0x19, 0x21,
	0xdd, 0xe0, 0x56, 0x7e, 0xf1, 0xb7, 0xa5, 0xb5, 0x21, 0xac, 0x70, 0x01, 0xb7, 0x81, 0xaa, 0x15,
	0x1d, 0xae, 0xc4, 0xfc, 0x6a, 0xb0, 0x8e, 0x7d, 0xc8, 0x4e, 0xdc, 0xc0, 0xa0, 0xac, 0xa2, 0x0b,
	0x51, 0xd7, 0xe5, 0x3d, 0x84, 0x04, 0x9e, 0x73, 0xaf, 0x64, 0x9b, 0xc1, 0x08, 0x86, 0x3e, 0x93,
	0xf3, 0xf3, 0xf9, 0x4b, 0xb0, 0x20, 0xc0, 0xdc, 0xb1, 0x4d, 0x93, 0xb5, 0x3c, 0x63, 0xd7, 0x64,
	0x92, 0x01, 0x9d, 0x0d, 0xaa, 0x21, 0x89, 0x56, 0xc3, 0x44, 0x08, 0xc6, 0x4f, 0x3c, 0xac, 0xff,
	0x10, 0x58, 0xec, 0xa3, 0x17, 0xbd, 0xfb, 0x1a, 0x4c, 0xec, 0x31, 0x76, 0x1e, 0xae, 0x71, 0xbd,
	0xd4, 0x83, 0x59, 0x1c, 0x42, 0x9a, 0x0e, 0x3b, 0xd2, 0x1c, 0xdd, 0x3d, 0x8f, 0xcc, 0x99, 0x41,
	0x1b, 0x0d, 0x69, 0x42, 0xf9, 0x5d, 0xa4, 0xe3, 0xbc, 0x6f, 0xb4, 0xf6, 0xb7, 0xad, 0x3d, 0x7b,
	0x70, 0xc7, 0x59, 0x04, 0xf9, 0x4c, 0x9b, 0x9e, 0xd1, 0xda, 0x0f, 0x12, 0x86, 0x53, 0xb8, 0x0e,
	0x7e, 0x2c, 0xdf, 0xad, 0x38, 0x96, 0xcf, 0xb6, 0x28, 0x28, 0xe2, 0x38, 0xde, 0x99, 0x72, 0xa7,
	0xee, 0x4c, 0xbf, 0x8e, 0x74, 0xa6, 0x08, 0x76, 0xbc, 0xae, 0x2f, 0x02, 0x70, 0xf3, 0x4d, 0x83,
	0x53, 0xb3, 0x5b, 0x93, 0x2f, 0x9c, 0x6c, 0x4d, 0x9e, 0xaf, 0xf4, 0xec, 0x5a, 0xd3, 0x1d, 0x6c,
	0x4d, 0xa1, 0xc9, 0x01, 0xa1, 0xa6, 0x90, 0x0b, 0x82, 0x3c, 0xd9, 0x10, 0xbf, 0x95, 0x5d, 0x6c,
	0x53, 0x49, 0xdc, 0x74, 0x1b, 0x8a, 0x81, 0xcf, 0xd9, 0x7d, 0xaa, 0x8f, 0xcb, 0x05, 0xdf, 0x65,
	0xe5, 0x23, 0xbf, 0xd1, 0x6c, 0x99, 0xe6, 0x5d, 0x99, 0x33, 0x3b, 0xa6, 0x16, 0x3e, 0xb3, 0x45,
	0x00, 0xc3, 0xe5, 0x85, 0xf9, 0x50, 0xf3, 0x18, 0xbe, 0xb5, 0xa2, 0xe1, 0xee, 0x48, 0x02, 0xbd,
	0x02, 0xd3, 0x86, 0xdb, 0xf4, 0x18, 0x17, 0xd4, 0x3c, 0xa6, 0x63, 0x92, 0x4c, 0x19, 0xee, 0xfb,
	0x01, 0xed, 0xcc, 0x46, 0x94, 0xdf, 0x12, 0xac, 0x09, 0x27, 0xb0, 0x06, 0xa5, 0x7d, 0xda, 0x7f,
	0x5b, 0x5d, 0x7e, 0x80, 0xe9, 0xb0, 0x92, 0x1e, 0x9b, 0x88, 0x0a, 0x0c, 0xcb, 0xd4, 0x5e, 0x44,
	0xeb, 0xd9, 0x25, 0xc3, 0x26, 0x5c, 0x12, 0xb0, 0x23, 0x06, 0xa3, 0xf9, 0x60, 0x6a, 0x56, 0x34,
	0x1f, 0x4c, 0x8d, 0xd7, 0xa9, 0x3d, 0x7c, 0xaf, 0x31, 0x99, 0x60, 0x18, 0x9b, 0x8a, 0xba, 0x89,
	0x19, 0x30, 0xb4, 0x97, 0xa5, 0x88, 0x97, 0xca, 0x7f, 0xf3, 0x30, 0x15, 0x9b, 0x6c, 0x67, 0x60,
	0x3c, 0x00, 0x33, 0x6e, 0xe8, 0xf1, 0x6f, 0x86, 0xf1, 0xc4, 0x37, 0xc3, 0xdb, 0x50, 0xd8, 0xd5,
	0x4c, 0xcd, 0x6a, 0xb1, 0x0d, 0xbc, 0xd7, 0x81, 0x23, 0x45, 0x20, 0x10, 0x11, 0xae, 0x63, 0x75,
	0x18, 0x5a, 0xb8, 0x4e, 0x57, 0x61, 0xd6, 0x61, 0x2e, 0x73, 0x0e, 0x59, 0x53, 0xd3, 0x75, 0x87,
	0xb9, 0x6e, 0x79, 0x52, 0xa4, 0xde, 0x0c, 0x92, 0xb7, 0x24, 0x95, 0xae, 0xc0, 0x14, 0xd6, 0xd9,
	0xa6, 0x98, 0xd8, 0xf3, 0x82, 0xab, 0x84, 0x34, 0xee, 0x3a, 0x67, 0x11, 0xcf, 0xc9, 0xed, 0x6a,
	0x2d, 0xc3, 0x6a, 0x97, 0x2f, 0x2c, 0x93, 0xb5, 0xe9, 0x46, 0x89, 0xd3, 0x1e, 0x4a, 0x12, 0x67,
	0x69, 0xf5, 0x1c, 0x87, 0x59, 0x9e, 0x2c, 0x76, 0x05, 0xf1, 0x4c, 0x4b, 0x48, 0x13, 0xe5, 0xce,
	0x00, 0xea, 0xb3, 0xb8, 0x07, 0x8e, 0x87, 0xc3, 0x4c, 0x51, 0x0c, 0x18, 0x6f, 0xe3, 0x80, 0x71,
	0x23, 0x5a, 0xc0, 0xf1, 0xb6, 0xd6, 0x2d, 0xe6, 0x1d, 0xd9, 0xce, 0x7e, 0x40, 0xe0, 0x3f, 0x3a,
	0x9a, 0xf7, 0xa8, 0x76, 0xdb, 0x68, 0xbf, 0xcb, 0x5a, 0x8d, 0x39, 0x54, 0xfb, 0xf0, 0xc0, 0xf1,
	0xe4, 0x3c, 0xf4, 0x55, 0xb8, 0xe8, 0x9b, 0x0a, 0xfb, 0x39, 0x9c, 0x6a, 0x94, 0xf1, 0x95, 0x07,
	0x5d, 0x9e, 0x7e, 0x19, 0x66, 0x3d, 0xdb, 0xd3, 0xcc, 0x88, 0xea, 0xd2, 0xa9, 0x54, 0xcf, 0x08,
	0x35, 0xa1, 0xe2, 0x63, 0xb8, 0xb8, 0xc7, 0x58, 0xb3, 0xed, 0xd8, 0x47, 0xde, 0xa3, 0x66, 0xdb,
	0xb4, 0x77, 0x35, 0xb3, 0x3c, 0x25, 0x5e, 0xe8, 0x42, 0xea, 0xc5, 0xbf, 0xcb, 0x5a, 0xe2, 0xee,
	0x6f, 0x60, 0xfb, 0xbb, 0x3e, 0x84, 0x61, 0x94, 0x71, 0x1b, 0xb3, 0x7b, 0x8c, 0xdd, 0x13, 0xa6,
	0xee, 0x09, 0x4b, 0xf4, 0x07, 0x04, 0x16, 0x13, 0x9d, 0x37, 0x81, 0x65, 0xfa, 0xbc, 0xb0, 0x54,
	0xe2, 0xdd, 0x38, 0x0a, 0x4b, 0xf9, 0x63, 0x1e, 0xe6, 0x4e, 0x7c, 0x87, 0x24, 0x1f, 0x61, 0xa4,
	0x6d, 0x8c, 0xa7, 0x7f, 0x13, 0x4e, 0x44, 0xa7, 0xa0, 0xfb, 0xf1, 0x89, 0x3b, 0x37, 0xf2, 0xf5,
	0xf1, 0xb4, 0x8b, 0x4e, 0xe8, 0xf7, 0xe3, 0x13, 0xfa, 0xe4, 0xe9, 0x14, 0x46, 0x26, 0xfa, 0xd8,
	0x10, 0x9e, 0xff, 0x7f, 0x87, 0xf0, 0x0f, 0x08, 0x7c, 0xd2, 0xd4, 0x5c, 0xaf, 0x19, 0xc9, 0x2f,
	0xc3, 0x72, 0x0d, 0x9d, 0x95, 0x2f, 0x9c, 0xd7, 0x9d, 0xbe, 0xc4, 0x0d, 0xde, 0xf5, 0x73, 0x6c,
	0x5b, 0x58, 0xa3, 0x7b, 0x50, 0xb0, 0x8f, 0x98, 0xce, 0x71, 0x94, 0x0b, 0x67, 0x3f, 0xd5, 0x5d,
	0xe0, 0xca, 0xef, 0x32, 0x46, 0x7f, 0x42, 0x40, 0x91, 0x0e, 0xa7, 0x27, 0x34, 0x3a, 0x5f, 0x3c,
	0x2f, 0xe7, 0xab, 0xc2, 0xf9, 0x94, 0xa4, 0xc6, 0x38, 0x1c, 0xc3, 0xbc, 0x8c, 0x43, 0x62, 0xd2,
	0x85, 0xb3, 0x8f, 0x09, 0x15, 0x31, 0x89, 0x4f, 0xbb, 0xff, 0x9e, 0x80, 0xb9, 0x13, 0x43, 0x93,
	0x3f, 0x61, 0x91, 0x70, 0xc2, 0xe2, 0xb5, 0xae, 0xed, 0xd8, 0xae, 0xdb, 0x4c, 0x7c, 0x16, 0x8d,
	0x5e, 0xeb, 0x84, 0x9a, 0xb0, 0xd6, 0x3d, 0x84, 0x69, 0x8b, 0x45, 0xab, 0xf3, 0xc4, 0xa9, 0xd4,
	0x4e, 0x59, 0x2c, 0x52, 0x99, 0xbf, 0x01, 0x34, 0x92, 0xe0, 0x76, 0xcf, 0x13, 0x97, 0x9c, 0x3b,
	0xaf, 0x4b, 0x9e, 0x0b, 0x2a, 0xe8, 0x7d, 0x69, 0x8a, 0xfe, 0x90, 0x40, 0xb5, 0x4f, 0xc6, 0xf9,
	0x68, 0x26, 0xcf, 0x0b, 0xcd, 0xe5, 0xb4, 0x1a, 0x8a, 0xc0, 0x36, 0xff, 0x35, 0x07, 0x93, 0x62,
	0x5c, 0xa2, 0xdf, 0x22, 0x90, 0x97, 0x3b, 0x51, 0xba, 0x96, 0x3e, 0x10, 0x9d, 0x5c, 0xc1, 0x56,
	0x5e, 0x1d, 0x82, 0x53, 0x66, 0x91, 0xf2, 0xca, 0x37, 0xff, 0xf4, 0xcf, 0xef, 0x8f, 0x57, 0xe9,
	0x82, 0x9a, 0xb1, 0x3b, 0xa6, 0xdf, 0x26, 0x50, 0xf0, 0xd7, 0x9f, 0xf4, 0xb5, 0x0c, 0xed, 0x89,
	0x0d, 0x6d, 0xe5, 0xfa, 0x50, 0xbc, 0x88, 0xe5, 0x8a, 0xc0, 0xb2, 0x48, 0x2f, 0xf7, 0xc1, 0x22,
	0xac, 0x7f, 0x40, 0x20, 0x27, 0xa6, 0x9c, 0x6b, 0x59, 0x4e, 0x86, 0x8b, 0xd0, 0xca, 0xea, 0x40,
	0x3e, 0x34, 0xbf, 0x2e, 0xcc, 0xaf, 0xd2, 0xab, 0x19, 0xe6, 0xd5, 0x27, 0xd8, 0xb7, 0x8e, 0xe9,
	0x8f, 0x08, 0x4c, 0x45, 0x77, 0x8b, 0xb4, 0x36, 0xc8, 0xd7, 0xf8, 0x62, 0xb4, 0xa2, 0x0e, 0xcd,
	0x8f, 0x00, 0x57, 0x05, 0xc0, 0x15, 0xba, 0xd4, 0x0f, 0xa0, 0x8f, 0xe4, 0xc7, 0x04, 0x0a, 0xbe,
	0x78, 0xe6, 0x75, 0x25, 0x36, 0x8d, 0x99, 0xd7, 0x95, 0x6c, 0xea, 0xca, 0x4d, 0x01, 0x47, 0xa5,
	0xeb, 0x03, 0xe0, 0xf0, 0x98, 0x05, 0x2b, 0x8c, 0x63, 0xfa, 0x1b, 0x02, 0x33, 0xf1, 0x2d, 0x20,
	0xdd, 0x18, 0xc2, 0x6c, 0x6c, 0xe1, 0x58, 0xa9, 0x8f, 0x20, 0x81, 0x70, 0xdf, 0x11, 0x70, 0xdf,
	0xa0, 0xaf, 0x8f, 0x04, 0x57, 0xd5, 0x24, 0xc4, 0xdf, 0x13, 0x98, 0x4f, 0x5b, 0xc3, 0xd1, 0x37,
	0x32, 0x90, 0x64, 0xac, 0x17, 0x2b, 0xb7, 0x46, 0x96, 0x43, 0x3f, 0x5e, 0x17, 0x7e, 0xd4, 0xe8,
	0xa7, 0xd2, 0xfd, 0x70, 0x51, 0x96, 0x7f, 0x46, 0x84, 0xf5, 0x9a, 0xfe, 0x81, 0xc0, 0xa5, 0x3e,
	0x7b, 0x30, 0xfa, 0xe6, 0x10, 0x50, 0xd2, 0x57, 0x74, 0x95, 0xb7, 0x4e, 0x23, 0x8a, 0x8e, 0xdc,
	0x12, 0x8e, 0xd4, 0xa9, 0x3a, 0xc0, 0x11, 0x47, 0xc8, 0x47, 0x7c, 0xf9, 0x25, 0x81, 0xb9, 0xe4,
	0xba, 0x8b, 0x6e, 0x66, 0x20, 0xe9, 0xb3, 0x73, 0xab, 0xdc, 0x18, 0x49, 0x06, 0x61, 0xab, 0x02,
	0xf6, 0xab, 0x74, 0x35, 0x1d, 0x76, 0x2b, 0x94, 0x6b, 0xb6, 0x04, 0xb2, 0x8f, 0x64, 0xa1, 0x08,
	0x56, 0x3d, 0x83, 0x0a, 0x45, 0x72, 0x9f, 0x35, 0xa8, 0x50, 0x9c, 0xd8, 0x21, 0x29, 0x9f, 0x16,
	0x10, 0x37, 0xe9, 0xc6, 0x50, 0x95, 0x4c, 0x0d, 0xf7, 0x4d, 0xf4, 0x43, 0x02, 0x05, 0x5f, 0x5f,
	0x66, 0xe5, 0x48, 0x2c, 0x82, 0x32, 0x2b, 0x47, 0x72, 0x74, 0x51, 0x3e, 0x27, 0xf0, 0xbd, 0x49,
	0x6f, 0x8d, 0x8a, 0x4f, 0x7d, 0xc2, 0x7f, 0x1f, 0xd3, 0x9f, 0x13, 0x98, 0x4d, 0x2c, 0x4d, 0x68,
	0x3d, 0x3b, 0x4a, 0x29, 0xcb, 0xa0, 0xca, 0xe6, 0x28, 0x22, 0x88, 0xfd, 0xba, 0xc0, 0x7e, 0x95,
	0x5e, 0x51, 0xb3, 0xfe, 0x20, 0x2b, 0xf7, 0x35, 0xf4, 0x67, 0x04, 0x4a, 0x11, 0x2d, 0x74, 0x3d,
	0xc3, 0xe0, 0xc9, 0x6d, 0x4a, 0xa5, 0x36, 0x2c, 0xfb, 0x70, 0x15, 0x39, 0x86, 0x4d, 0x7d, 0x82,
	0x8b, 0x9a, 0xe3, 0xdb, 0x0f, 0x9e, 0xfe, 0xa3, 0x3a, 0xf6, 0xf4, 0x79, 0x95, 0x7c, 0xfc, 0xbc,
	0x4a, 0xfe, 0xfe, 0xbc, 0x4a, 0xbe, 0xfb, 0xa2, 0x3a, 0xf6, 0xf1, 0x8b, 0xea, 0xd8, 0x5f, 0x5e,
	0x54, 0xc7, 0xbe, 0x32, 0xdc, 0x37, 0xfe, 0xe1, 0x4d, 0xf5, 0xeb, 0xc2, 0x98, 0x18, 0x73, 0x76,
	0xf3, 0xe2, 0x2f, 0xc4, 0x37, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x2f, 0x63, 0x7c, 0x42,
	0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	AllPools(ctx context.Context, in *QueryAllPoolsRequest, opts ...grpc.CallOption) (*QueryAllPoolsResponse, error)
	Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	AllPositions(ctx context.Context, in *QueryAllPositionsRequest, opts ...grpc.CallOption) (*QueryAllPositionsResponse, error)
	Position(ctx context.Context, in *QueryPositionRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error)
	PositionAssets(ctx context.Context, in *QueryPositionAssetsRequest, opts ...grpc.CallOption) (*QueryPositionAssetsResponse, error)
	SimulateAddLiquidity(ctx context.Context, in *QuerySimulateAddLiquidityRequest, opts ...grpc.CallOption) (*QuerySimulateAddLiquidityResponse, error)
	SimulateRemoveLiquidity(ctx context.Context, in *QuerySimulateRemoveLiquidityRequest, opts ...grpc.CallOption) (*QuerySimulateRemoveLiquidityResponse, error)
	CollectibleCoins(ctx context.Context, in *QueryCollectibleCoinsRequest, opts ...grpc.CallOption) (*QueryCollectibleCoinsResponse, error)
	AllTickInfos(ctx context.Context, in *QueryAllTickInfosRequest, opts ...grpc.CallOption) (*QueryAllTickInfosResponse, error)
	TickInfo(ctx context.Context, in *QueryTickInfoRequest, opts ...grpc.CallOption) (*QueryTickInfoResponse, error)
	AllFarmingPlans(ctx context.Context, in *QueryAllFarmingPlansRequest, opts ...grpc.CallOption) (*QueryAllFarmingPlansResponse, error)
	FarmingPlan(ctx context.Context, in *QueryFarmingPlanRequest, opts ...grpc.CallOption) (*QueryFarmingPlanResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllPools(ctx context.Context, in *QueryAllPoolsRequest, opts ...grpc.CallOption) (*QueryAllPoolsResponse, error) {
	out := new(QueryAllPoolsResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/AllPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllPositions(ctx context.Context, in *QueryAllPositionsRequest, opts ...grpc.CallOption) (*QueryAllPositionsResponse, error) {
	out := new(QueryAllPositionsResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/AllPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Position(ctx context.Context, in *QueryPositionRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error) {
	out := new(QueryPositionResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/Position", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PositionAssets(ctx context.Context, in *QueryPositionAssetsRequest, opts ...grpc.CallOption) (*QueryPositionAssetsResponse, error) {
	out := new(QueryPositionAssetsResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/PositionAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateAddLiquidity(ctx context.Context, in *QuerySimulateAddLiquidityRequest, opts ...grpc.CallOption) (*QuerySimulateAddLiquidityResponse, error) {
	out := new(QuerySimulateAddLiquidityResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/SimulateAddLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateRemoveLiquidity(ctx context.Context, in *QuerySimulateRemoveLiquidityRequest, opts ...grpc.CallOption) (*QuerySimulateRemoveLiquidityResponse, error) {
	out := new(QuerySimulateRemoveLiquidityResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/SimulateRemoveLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectibleCoins(ctx context.Context, in *QueryCollectibleCoinsRequest, opts ...grpc.CallOption) (*QueryCollectibleCoinsResponse, error) {
	out := new(QueryCollectibleCoinsResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/CollectibleCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllTickInfos(ctx context.Context, in *QueryAllTickInfosRequest, opts ...grpc.CallOption) (*QueryAllTickInfosResponse, error) {
	out := new(QueryAllTickInfosResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/AllTickInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TickInfo(ctx context.Context, in *QueryTickInfoRequest, opts ...grpc.CallOption) (*QueryTickInfoResponse, error) {
	out := new(QueryTickInfoResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/TickInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllFarmingPlans(ctx context.Context, in *QueryAllFarmingPlansRequest, opts ...grpc.CallOption) (*QueryAllFarmingPlansResponse, error) {
	out := new(QueryAllFarmingPlansResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/AllFarmingPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FarmingPlan(ctx context.Context, in *QueryFarmingPlanRequest, opts ...grpc.CallOption) (*QueryFarmingPlanResponse, error) {
	out := new(QueryFarmingPlanResponse)
	err := c.cc.Invoke(ctx, "/crescent.amm.v1beta1.Query/FarmingPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	AllPools(context.Context, *QueryAllPoolsRequest) (*QueryAllPoolsResponse, error)
	Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	AllPositions(context.Context, *QueryAllPositionsRequest) (*QueryAllPositionsResponse, error)
	Position(context.Context, *QueryPositionRequest) (*QueryPositionResponse, error)
	PositionAssets(context.Context, *QueryPositionAssetsRequest) (*QueryPositionAssetsResponse, error)
	SimulateAddLiquidity(context.Context, *QuerySimulateAddLiquidityRequest) (*QuerySimulateAddLiquidityResponse, error)
	SimulateRemoveLiquidity(context.Context, *QuerySimulateRemoveLiquidityRequest) (*QuerySimulateRemoveLiquidityResponse, error)
	CollectibleCoins(context.Context, *QueryCollectibleCoinsRequest) (*QueryCollectibleCoinsResponse, error)
	AllTickInfos(context.Context, *QueryAllTickInfosRequest) (*QueryAllTickInfosResponse, error)
	TickInfo(context.Context, *QueryTickInfoRequest) (*QueryTickInfoResponse, error)
	AllFarmingPlans(context.Context, *QueryAllFarmingPlansRequest) (*QueryAllFarmingPlansResponse, error)
	FarmingPlan(context.Context, *QueryFarmingPlanRequest) (*QueryFarmingPlanResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AllPools(ctx context.Context, req *QueryAllPoolsRequest) (*QueryAllPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPools not implemented")
}
func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) AllPositions(ctx context.Context, req *QueryAllPositionsRequest) (*QueryAllPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPositions not implemented")
}
func (*UnimplementedQueryServer) Position(ctx context.Context, req *QueryPositionRequest) (*QueryPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Position not implemented")
}
func (*UnimplementedQueryServer) PositionAssets(ctx context.Context, req *QueryPositionAssetsRequest) (*QueryPositionAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionAssets not implemented")
}
func (*UnimplementedQueryServer) SimulateAddLiquidity(ctx context.Context, req *QuerySimulateAddLiquidityRequest) (*QuerySimulateAddLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateAddLiquidity not implemented")
}
func (*UnimplementedQueryServer) SimulateRemoveLiquidity(ctx context.Context, req *QuerySimulateRemoveLiquidityRequest) (*QuerySimulateRemoveLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateRemoveLiquidity not implemented")
}
func (*UnimplementedQueryServer) CollectibleCoins(ctx context.Context, req *QueryCollectibleCoinsRequest) (*QueryCollectibleCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectibleCoins not implemented")
}
func (*UnimplementedQueryServer) AllTickInfos(ctx context.Context, req *QueryAllTickInfosRequest) (*QueryAllTickInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllTickInfos not implemented")
}
func (*UnimplementedQueryServer) TickInfo(ctx context.Context, req *QueryTickInfoRequest) (*QueryTickInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TickInfo not implemented")
}
func (*UnimplementedQueryServer) AllFarmingPlans(ctx context.Context, req *QueryAllFarmingPlansRequest) (*QueryAllFarmingPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllFarmingPlans not implemented")
}
func (*UnimplementedQueryServer) FarmingPlan(ctx context.Context, req *QueryFarmingPlanRequest) (*QueryFarmingPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FarmingPlan not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/AllPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllPools(ctx, req.(*QueryAllPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/AllPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllPositions(ctx, req.(*QueryAllPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Position_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Position(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/Position",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Position(ctx, req.(*QueryPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PositionAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PositionAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/PositionAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PositionAssets(ctx, req.(*QueryPositionAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateAddLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateAddLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateAddLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/SimulateAddLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateAddLiquidity(ctx, req.(*QuerySimulateAddLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateRemoveLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateRemoveLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateRemoveLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/SimulateRemoveLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateRemoveLiquidity(ctx, req.(*QuerySimulateRemoveLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectibleCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollectibleCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectibleCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/CollectibleCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectibleCoins(ctx, req.(*QueryCollectibleCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllTickInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTickInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllTickInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/AllTickInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllTickInfos(ctx, req.(*QueryAllTickInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TickInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTickInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TickInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/TickInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TickInfo(ctx, req.(*QueryTickInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllFarmingPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFarmingPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllFarmingPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/AllFarmingPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllFarmingPlans(ctx, req.(*QueryAllFarmingPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FarmingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFarmingPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FarmingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.amm.v1beta1.Query/FarmingPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FarmingPlan(ctx, req.(*QueryFarmingPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crescent.amm.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AllPools",
			Handler:    _Query_AllPools_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "AllPositions",
			Handler:    _Query_AllPositions_Handler,
		},
		{
			MethodName: "Position",
			Handler:    _Query_Position_Handler,
		},
		{
			MethodName: "PositionAssets",
			Handler:    _Query_PositionAssets_Handler,
		},
		{
			MethodName: "SimulateAddLiquidity",
			Handler:    _Query_SimulateAddLiquidity_Handler,
		},
		{
			MethodName: "SimulateRemoveLiquidity",
			Handler:    _Query_SimulateRemoveLiquidity_Handler,
		},
		{
			MethodName: "CollectibleCoins",
			Handler:    _Query_CollectibleCoins_Handler,
		},
		{
			MethodName: "AllTickInfos",
			Handler:    _Query_AllTickInfos_Handler,
		},
		{
			MethodName: "TickInfo",
			Handler:    _Query_TickInfo_Handler,
		},
		{
			MethodName: "AllFarmingPlans",
			Handler:    _Query_AllFarmingPlans_Handler,
		},
		{
			MethodName: "FarmingPlan",
			Handler:    _Query_FarmingPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crescent/amm/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPositionAssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionAssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionAssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Coin0.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySimulateAddLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateAddLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateAddLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DesiredAmount) > 0 {
		i -= len(m.DesiredAmount)
		copy(dAtA[i:], m.DesiredAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DesiredAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UpperPrice) > 0 {
		i -= len(m.UpperPrice)
		copy(dAtA[i:], m.UpperPrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UpperPrice)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LowerPrice) > 0 {
		i -= len(m.LowerPrice)
		copy(dAtA[i:], m.LowerPrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LowerPrice)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateAddLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateAddLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateAddLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.Liquidity.Size()
		i -= size
		if _, err := m.Liquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySimulateRemoveLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateRemoveLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateRemoveLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Liquidity) > 0 {
		i -= len(m.Liquidity)
		copy(dAtA[i:], m.Liquidity)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Liquidity)))
		i--
		dAtA[i] = 0x12
	}
	if m.PositionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateRemoveLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateRemoveLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateRemoveLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectibleCoinsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectibleCoinsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectibleCoinsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectibleCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectibleCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectibleCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FarmingRewards) > 0 {
		for iNdEx := len(m.FarmingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FarmingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Fee) > 0 {
		for iNdEx := len(m.Fee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTickInfosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTickInfosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTickInfosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.UpperTick) > 0 {
		i -= len(m.UpperTick)
		copy(dAtA[i:], m.UpperTick)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UpperTick)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LowerTick) > 0 {
		i -= len(m.LowerTick)
		copy(dAtA[i:], m.LowerTick)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LowerTick)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTickInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTickInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTickInfosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TickInfos) > 0 {
		for iNdEx := len(m.TickInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TickInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTickInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTickInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTickInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tick != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTickInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTickInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTickInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TickInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFarmingPlansRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFarmingPlansRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFarmingPlansRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IsTerminated) > 0 {
		i -= len(m.IsTerminated)
		copy(dAtA[i:], m.IsTerminated)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IsTerminated)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IsPrivate) > 0 {
		i -= len(m.IsPrivate)
		copy(dAtA[i:], m.IsPrivate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IsPrivate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFarmingPlansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFarmingPlansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFarmingPlansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FarmingPlans) > 0 {
		for iNdEx := len(m.FarmingPlans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FarmingPlans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFarmingPlanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmingPlanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmingPlanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFarmingPlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmingPlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmingPlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FarmingPlan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FarmingRewardsGrowthGlobal) > 0 {
		for iNdEx := len(m.FarmingRewardsGrowthGlobal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FarmingRewardsGrowthGlobal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.FeeGrowthGlobal) > 0 {
		for iNdEx := len(m.FeeGrowthGlobal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeGrowthGlobal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	{
		size := m.TotalLiquidity.Size()
		i -= size
		if _, err := m.TotalLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.CurrentLiquidity.Size()
		i -= size
		if _, err := m.CurrentLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.CurrentSqrtPrice.Size()
		i -= size
		if _, err := m.CurrentSqrtPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.CurrentTick != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentTick))
		i--
		dAtA[i] = 0x40
	}
	if m.TickSpacing != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickSpacing))
		i--
		dAtA[i] = 0x38
	}
	if len(m.RewardsPool) > 0 {
		i -= len(m.RewardsPool)
		copy(dAtA[i:], m.RewardsPool)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RewardsPool)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Balance1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Balance0.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwedFarmingRewards) > 0 {
		for iNdEx := len(m.OwedFarmingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OwedFarmingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.LastFarmingRewardsGrowthInside) > 0 {
		for iNdEx := len(m.LastFarmingRewardsGrowthInside) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastFarmingRewardsGrowthInside[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.OwedFee) > 0 {
		for iNdEx := len(m.OwedFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OwedFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.LastFeeGrowthInside) > 0 {
		for iNdEx := len(m.LastFeeGrowthInside) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastFeeGrowthInside[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size := m.Liquidity.Size()
		i -= size
		if _, err := m.Liquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.UpperPrice.Size()
		i -= size
		if _, err := m.UpperPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.LowerPrice.Size()
		i -= size
		if _, err := m.LowerPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TickInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FarmingRewardsGrowthOutside) > 0 {
		for iNdEx := len(m.FarmingRewardsGrowthOutside) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FarmingRewardsGrowthOutside[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.FeeGrowthOutside) > 0 {
		for iNdEx := len(m.FeeGrowthOutside) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeGrowthOutside[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.NetLiquidity.Size()
		i -= size
		if _, err := m.NetLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.GrossLiquidity.Size()
		i -= size
		if _, err := m.GrossLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Tick != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != 0 {
		n += 1 + sovQuery(uint64(m.PositionId))
	}
	return n
}

func (m *QueryPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Position.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPositionAssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != 0 {
		n += 1 + sovQuery(uint64(m.PositionId))
	}
	return n
}

func (m *QueryPositionAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coin0.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Coin1.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySimulateAddLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.LowerPrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UpperPrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DesiredAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateAddLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Liquidity.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySimulateRemoveLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != 0 {
		n += 1 + sovQuery(uint64(m.PositionId))
	}
	l = len(m.Liquidity)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateRemoveLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCollectibleCoinsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PositionId != 0 {
		n += 1 + sovQuery(uint64(m.PositionId))
	}
	return n
}

func (m *QueryCollectibleCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fee) > 0 {
		for _, e := range m.Fee {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.FarmingRewards) > 0 {
		for _, e := range m.FarmingRewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllTickInfosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.LowerTick)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UpperTick)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTickInfosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TickInfos) > 0 {
		for _, e := range m.TickInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTickInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Tick != 0 {
		n += 1 + sovQuery(uint64(m.Tick))
	}
	return n
}

func (m *QueryTickInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TickInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFarmingPlansRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IsPrivate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.IsTerminated)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFarmingPlansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FarmingPlans) > 0 {
		for _, e := range m.FarmingPlans {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFarmingPlanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanId != 0 {
		n += 1 + sovQuery(uint64(m.PlanId))
	}
	return n
}

func (m *QueryFarmingPlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FarmingPlan.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *PoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	l = m.Balance0.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Balance1.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RewardsPool)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickSpacing != 0 {
		n += 1 + sovQuery(uint64(m.TickSpacing))
	}
	if m.CurrentTick != 0 {
		n += 1 + sovQuery(uint64(m.CurrentTick))
	}
	l = m.CurrentSqrtPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.CurrentLiquidity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalLiquidity.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.FeeGrowthGlobal) > 0 {
		for _, e := range m.FeeGrowthGlobal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.FarmingRewardsGrowthGlobal) > 0 {
		for _, e := range m.FarmingRewardsGrowthGlobal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *PositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.LowerPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.UpperPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Liquidity.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.LastFeeGrowthInside) > 0 {
		for _, e := range m.LastFeeGrowthInside {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.OwedFee) > 0 {
		for _, e := range m.OwedFee {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.LastFarmingRewardsGrowthInside) > 0 {
		for _, e := range m.LastFarmingRewardsGrowthInside {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.OwedFarmingRewards) > 0 {
		for _, e := range m.OwedFarmingRewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *TickInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tick != 0 {
		n += 1 + sovQuery(uint64(m.Tick))
	}
	l = m.GrossLiquidity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.NetLiquidity.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.FeeGrowthOutside) > 0 {
		for _, e := range m.FeeGrowthOutside {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.FarmingRewardsGrowthOutside) > 0 {
		for _, e := range m.FarmingRewardsGrowthOutside {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, PoolResponse{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, PositionResponse{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionAssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionAssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionAssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateAddLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateAddLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateAddLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowerPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpperPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateAddLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateAddLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateAddLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Liquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateRemoveLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateRemoveLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateRemoveLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateRemoveLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateRemoveLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateRemoveLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectibleCoinsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectibleCoinsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectibleCoinsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectibleCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectibleCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectibleCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = append(m.Fee, types.Coin{})
			if err := m.Fee[len(m.Fee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingRewards = append(m.FarmingRewards, types.Coin{})
			if err := m.FarmingRewards[len(m.FarmingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTickInfosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTickInfosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTickInfosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerTick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowerTick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperTick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpperTick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTickInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTickInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTickInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TickInfos = append(m.TickInfos, TickInfoResponse{})
			if err := m.TickInfos[len(m.TickInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTickInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTickInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTickInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTickInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTickInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTickInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TickInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFarmingPlansRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFarmingPlansRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFarmingPlansRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsPrivate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTerminated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsTerminated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFarmingPlansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFarmingPlansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFarmingPlansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingPlans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingPlans = append(m.FarmingPlans, FarmingPlan{})
			if err := m.FarmingPlans[len(m.FarmingPlans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmingPlanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmingPlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmingPlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmingPlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmingPlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmingPlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FarmingPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsPool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickSpacing", wireType)
			}
			m.TickSpacing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickSpacing |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTick", wireType)
			}
			m.CurrentTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTick |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSqrtPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentSqrtPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeGrowthGlobal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeGrowthGlobal = append(m.FeeGrowthGlobal, types.DecCoin{})
			if err := m.FeeGrowthGlobal[len(m.FeeGrowthGlobal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingRewardsGrowthGlobal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingRewardsGrowthGlobal = append(m.FarmingRewardsGrowthGlobal, types.DecCoin{})
			if err := m.FarmingRewardsGrowthGlobal[len(m.FarmingRewardsGrowthGlobal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LowerPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpperPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Liquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFeeGrowthInside", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastFeeGrowthInside = append(m.LastFeeGrowthInside, types.DecCoin{})
			if err := m.LastFeeGrowthInside[len(m.LastFeeGrowthInside)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwedFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwedFee = append(m.OwedFee, types.Coin{})
			if err := m.OwedFee[len(m.OwedFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFarmingRewardsGrowthInside", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastFarmingRewardsGrowthInside = append(m.LastFarmingRewardsGrowthInside, types.DecCoin{})
			if err := m.LastFarmingRewardsGrowthInside[len(m.LastFarmingRewardsGrowthInside)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwedFarmingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwedFarmingRewards = append(m.OwedFarmingRewards, types.Coin{})
			if err := m.OwedFarmingRewards[len(m.OwedFarmingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TickInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrossLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GrossLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeGrowthOutside", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeGrowthOutside = append(m.FeeGrowthOutside, types.DecCoin{})
			if err := m.FeeGrowthOutside[len(m.FeeGrowthOutside)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingRewardsGrowthOutside", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingRewardsGrowthOutside = append(m.FarmingRewardsGrowthOutside, types.DecCoin{})
			if err := m.FarmingRewardsGrowthOutside[len(m.FarmingRewardsGrowthOutside)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
