syntax = "proto3";
package crescent.liquidstaking.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/crescent-network/crescent/v4/x/liquidstaking/types";

// Msg defines the liquid staking Msg service.
service Msg {

  // LiquidStake defines a method for performing a delegation of coins
  // from a delegator to whitelisted validators.
  rpc LiquidStake(MsgLiquidStake) returns (MsgLiquidStakeResponse);

  // LiquidUnstake defines a method for performing an undelegation of liquid staking from a
  // delegate.
  rpc LiquidUnstake(MsgLiquidUnstake) returns (MsgLiquidUnstakeResponse);
}

// MsgLiquidStake defines a SDK message for performing a liquid stake of coins
// from a delegator to whitelisted validators.
message MsgLiquidStake {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   delegator_address = 1 [(gogoproto.moretags) = "yaml:\"delegator_address\""];
  cosmos.base.v1beta1.Coin amount            = 2 [(gogoproto.nullable) = false];
}

// MsgLiquidStakeResponse defines the Msg/LiquidStake response type.
message MsgLiquidStakeResponse {}

// MsgLiquidUnstake defines a SDK message for performing an undelegation of liquid staking from a
// delegate.
message MsgLiquidUnstake {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                   delegator_address = 1 [(gogoproto.moretags) = "yaml:\"delegator_address\""];
  cosmos.base.v1beta1.Coin amount            = 2 [(gogoproto.nullable) = false];
}

// MsgLiquidUnstakeResponse defines the Msg/LiquidUnstake response type.
message MsgLiquidUnstakeResponse {
  google.protobuf.Timestamp completion_time = 1 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}
