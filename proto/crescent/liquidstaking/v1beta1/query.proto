syntax = "proto3";
package crescent.liquidstaking.v1beta1;

import "google/api/annotations.proto";
import "crescent/liquidstaking/v1beta1/liquidstaking.proto";
import "gogoproto/gogo.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/crescent-network/crescent/x/liquidstaking/types";

// Query defines the gRPC query service for the liquidstaking module.
service Query {
  // Params returns parameters of the liquidstaking module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get                                           = "/crescent/liquidstaking/v1beta1/params";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns all parameters of the liquid staking module."
  external_docs: {
  url:
    "https://github.com/crescent-network/crescent/tree/main/x/liquidstaking/spec"
  description:
    "Find out more about the params"
  }
  };
}
// LiquidValidators returns liquid validators with states of the liquidstaking module.
rpc LiquidValidators(QueryLiquidValidatorsRequest) returns (QueryLiquidValidatorsResponse) {
  option (google.api.http).get                                           = "/crescent/liquidstaking/v1beta1/validators";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns all liquid validators of the liquid staking module."
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/x/liquidstaking/spec"
description:
  "Find out more about the liquid validators"
}
};
}
// VotingPower returns voting power of staking and liquid staking module's of the voter that can be exercised.
rpc VotingPower(QueryVotingPowerRequest) returns (QueryVotingPowerResponse) {
  option (google.api.http).get = "/crescent/liquidstaking/v1beta1/voting_power/{voter}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns voting power of staking and liquid staking module's of the voter that can be exercised."
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/x/liquidstaking/spec"
description:
  "Find out more about the liquid validators"
}
};
}

// States returns states of the liquidstaking module.
rpc States(QueryStatesRequest) returns (QueryStatesResponse) {
  option (google.api.http).get                                           = "/crescent/liquidstaking/v1beta1/states";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns states of the liquid staking module."
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/x/liquidstaking/spec"
description:
  "Find out more about the liquid staking"
}
};
}
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryLiquidValidatorsRequest is the request type for the Query/LiquidValidators RPC method.
message QueryLiquidValidatorsRequest {}

// QueryLiquidValidatorsResponse is the response type for the Query/LiquidValidators RPC method.
message QueryLiquidValidatorsResponse {
  repeated LiquidValidatorState liquid_validators = 1 [(gogoproto.nullable) = false];
}

// QueryStatesRequest is the request type for the Query/States RPC method.
message QueryStatesRequest {}

// QueryStatesResponse is the response type for the Query/States RPC method.
message QueryStatesResponse {
  NetAmountState net_amount_state = 1 [(gogoproto.nullable) = false];
}

// QueryVotingPowerRequest is the request type for the Query/States RPC method.
message QueryVotingPowerRequest {
  string voter = 1;
}

// QueryVotingPowerResponse is the response type for the Query/States RPC method.
message QueryVotingPowerResponse {
  VotingPower voting_power = 1 [(gogoproto.nullable) = false];
}