syntax = "proto3";
package crescent.liquidfarming.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/crescent-network/crescent/v4/x/liquidfarming/types";

// Msg defines the Msg service.
service Msg {
  // LiquidFarm defines a method for farming pool coin for a liquid farm
  rpc LiquidFarm(MsgLiquidFarm) returns (MsgLiquidFarmResponse);

  // LiquidUnfarm defines a method for unfarming amount of LFCoin
  rpc LiquidUnfarm(MsgLiquidUnfarm) returns (MsgLiquidUnfarmResponse);

  // LiquidUnfarmAndWithdraw defines a method for unfarming amount of LFCoin and withdraw pool coin from the pool
  rpc LiquidUnfarmAndWithdraw(MsgLiquidUnfarmAndWithdraw) returns (MsgLiquidUnfarmAndWithdrawResponse);

  // PlaceBid defines a method for placing a bid for a rewards auction
  rpc PlaceBid(MsgPlaceBid) returns (MsgPlaceBidResponse);

  // RefundBid defines a method for refunding the bid that is not winning for the auction
  rpc RefundBid(MsgRefundBid) returns (MsgRefundBidResponse);

  // AdvanceAuction defines a method for advancing rewards auction by one.
  // This Msg is defined just for testing purpose and it shouldn't be used in production.
  rpc AdvanceAuction(MsgAdvanceAuction) returns (MsgAdvanceAuctionResponse);
}

// MsgLiquidFarm defines a SDK message for farming pool coin for a liquid farm.
message MsgLiquidFarm {
  option (gogoproto.goproto_getters) = false;

  uint64 pool_id = 1;

  string farmer = 2;

  cosmos.base.v1beta1.Coin farming_coin = 3
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
}

// MsgLiquidFarmResponse defines the MsgLiquidFarmResponse response type.
message MsgLiquidFarmResponse {}

// MsgLiquidUnfarm defines a SDK message for unfarming LFCoin.
message MsgLiquidUnfarm {
  option (gogoproto.goproto_getters) = false;

  uint64 pool_id = 1;

  string farmer = 2;

  cosmos.base.v1beta1.Coin unfarming_coin = 3
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
}

// MsgLiquidUnfarmResponse defines the MsgLiquidUnfarmResponse response type.
message MsgLiquidUnfarmResponse {}

// MsgLiquidUnfarmAndWithdraw defines a SDK message for unfarming LFCoin.
message MsgLiquidUnfarmAndWithdraw {
  option (gogoproto.goproto_getters) = false;

  uint64 pool_id = 1;

  string farmer = 2;

  cosmos.base.v1beta1.Coin unfarming_coin = 3
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
}

// MsgLiquidUnfarmAndWithdrawResponse defines the MsgLiquidUnfarmAndWithdrawResponse response type.
message MsgLiquidUnfarmAndWithdrawResponse {}

// MsgPlaceBid defines a SDK message for placing a bid for a rewards auction.
message MsgPlaceBid {
  option (gogoproto.goproto_getters) = false;

  uint64 auction_id = 1;

  uint64 pool_id = 2;

  string bidder = 3;

  cosmos.base.v1beta1.Coin bidding_coin = 4
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
}

// MsgPlaceBidResponse defines the MsgPlaceBidResponse response type.
message MsgPlaceBidResponse {}

// MsgRefundBid defines a SDK message for refunding the bid that is not winning for the auction.
message MsgRefundBid {
  option (gogoproto.goproto_getters) = false;

  uint64 auction_id = 1;

  uint64 pool_id = 2;

  string bidder = 3;
}

// MsgRefundBidResponse defines the MsgRefundBidResponse response type.
message MsgRefundBidResponse {}

// MsgAdvanceAuction defines a message to advance rewards auction by one.
message MsgAdvanceAuction {
  option (gogoproto.goproto_getters) = false;

  // requester defines the bech32-encoded address of the requester
  string requester = 1;
}

// MsgAdvanceAuctionResponse defines the Msg/AdvanceAuction response type.
message MsgAdvanceAuctionResponse {}
