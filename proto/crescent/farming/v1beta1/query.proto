syntax = "proto3";

package crescent.farming.v1beta1;

import "crescent/farming/v1beta1/farming.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/crescent-network/crescent/x/farming/types";

// Query defines the gRPC query service for the farming module.
service Query {
  // Params returns parameters of the farming module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get                                           = "/crescent/farming/v1beta1/params";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns all parameters of the farming module."
  external_docs: {
  url:
    "https://github.com/crescent-network/crescent/blob/main/x/farming/spec/07_params.md"
  description:
    "Find out more about the params"
  }
  };
}

// Plans returns all plans.
rpc Plans(QueryPlansRequest) returns (QueryPlansResponse) {
  option (google.api.http).get                                           = "/crescent/farming/v1beta1/plans";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns a list of all farming plans with pagination result."
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/docs"
description:
  "Find out more about the query and error codes"
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = invalid plan type PLAN_TYPE","details":[]}'
    }
  }
}
responses: {
key:
  "500" value: {
  description:
    "Internal Server Error" examples: {
    key:
      "application/json" value: '{"code":13,"message":"rpc error: code = Internal desc = error","details":[]}'
    }
  }
}
};
}

// Plan returns a specific plan.
rpc Plan(QueryPlanRequest) returns (QueryPlanResponse) {
  option (google.api.http).get                                           = "/crescent/farming/v1beta1/plans/{plan_id}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns the farming plan that corresponds to the plan_id."
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/docs"
description:
  "Find out more about the query and error codes"
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
responses: {
key:
  "404" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":5,"message":"rpc error: code = NotFound desc = plan plan_id not found","details":[]}'
    }
  }
}
responses: {
key:
  "500" value: {
  description:
    "Internal Server Error" examples: {
    key:
      "application/json" value: '{"code":13,"message":"rpc error: code = Internal desc = error","details":[]}'
    }
  }
}
};
}

rpc Position(QueryPositionRequest) returns (QueryPositionResponse) {
  option (google.api.http).get = "/crescent/farming/v1beta1/positions/{farmer}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns the farming position of the farmer"
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/docs"
description:
  "Find out more about the query and error codes"
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
};
}

// Stakings returns all stakings by a farmer.
rpc Stakings(QueryStakingsRequest) returns (QueryStakingsResponse) {
  option (google.api.http).get = "/crescent/farming/v1beta1/stakings/{farmer}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns all stakings (staked and queued coins) that corresponds to the farmer"
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/docs"
description:
  "Find out more about the query and error codes"
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
};
}

// QueryStakings returns all queued stakings by a farmer.
rpc QueuedStakings(QueryQueuedStakingsRequest) returns (QueryQueuedStakingsResponse) {
  option (google.api.http).get = "/crescent/farming/v1beta1/queued_stakings/{farmer}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns all queued stakings that corresponds to the farmer"
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/docs"
description:
  "Find out more about the query and error codes"
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
};
}

// TotalStakings returns total staking amount for a staking coin denom
rpc TotalStakings(QueryTotalStakingsRequest) returns (QueryTotalStakingsResponse) {
  option (google.api.http).get = "/crescent/farming/v1beta1/total_stakings/{staking_coin_denom}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns total stakings that corresponds to the staking_coin_denom"
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/docs"
description:
  "Find out more about the query and error codes"
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
};
}

// Rewards returns rewards for a farmer
rpc Rewards(QueryRewardsRequest) returns (QueryRewardsResponse) {
  option (google.api.http).get                                           = "/crescent/farming/v1beta1/rewards/{farmer}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns all rewards coins that corresponds to the farmer"
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/docs"
description:
  "Find out more about the query and error codes"
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
};
}

// UnharvestedRewards returns unharvested rewards for a farmer
rpc UnharvestedRewards(QueryUnharvestedRewardsRequest) returns (QueryUnharvestedRewardsResponse) {
  option (google.api.http).get = "/crescent/farming/v1beta1/unharvested_rewards/{farmer}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns all unharvested rewards that corresponds to the farmer"
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/docs"
description:
  "Find out more about the query and error codes"
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
};
}

// CurrentEpochDays returns current epoch days.
rpc CurrentEpochDays(QueryCurrentEpochDaysRequest) returns (QueryCurrentEpochDaysResponse) {
  option (google.api.http).get = "/crescent/farming/v1beta1/current_epoch_days";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns the current epoch days"
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/docs"
description:
  "Find out more about the query and error codes"
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
};
}

// HistoricalRewards returns HistoricalRewards records for a staking coin denom.
rpc HistoricalRewards(QueryHistoricalRewardsRequest) returns (QueryHistoricalRewardsResponse) {
  option (google.api.http).get = "/crescent/farming/v1beta1/historical_rewards/{staking_coin_denom}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns HistoricalRewards records for a staking coin denom"
external_docs: {
url:
  "https://github.com/crescent-network/crescent/tree/main/docs"
description:
  "Find out more about the query and error codes"
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
};
}
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryPlansRequest is the request type for the Query/Plans RPC method.
message QueryPlansRequest {
  string                                type                 = 1;
  string                                farming_pool_address = 2;
  string                                termination_address  = 3;
  string                                staking_coin_denom   = 4;
  string                                terminated           = 5;
  cosmos.base.query.v1beta1.PageRequest pagination           = 6;
}

// QueryPlansResponse is the response type for the Query/Plans RPC method.
message QueryPlansResponse {
  // plans are the existing plans
  repeated google.protobuf.Any plans = 1 [(cosmos_proto.accepts_interface) = "PlanI"];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPlanRequest is the request type for the Query/Plan RPC method.
message QueryPlanRequest {
  uint64 plan_id = 1;
}

// QueryPlanResponse is the response type for the Query/Plan RPC method.
message QueryPlanResponse {
  google.protobuf.Any plan = 1 [(cosmos_proto.accepts_interface) = "PlanI"];
}

// QueryPositionRequest is the request type for the Query/Position RPC method.
message QueryPositionRequest {
  string farmer             = 1;
  string staking_coin_denom = 2;
}

// QueryPositionResponse is the response type for the Query/Position RPC method.
message QueryPositionResponse {
  repeated cosmos.base.v1beta1.Coin staked_coins = 1
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin queued_coins = 2
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin rewards = 3
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
}

// QueryStakingsRequest is the request type for the Query/Stakings RPC method.
message QueryStakingsRequest {
  string                                farmer             = 1;
  string                                staking_coin_denom = 2;
  cosmos.base.query.v1beta1.PageRequest pagination         = 3;
}

// QueryStakingsResponse is the response type for the Query/Stakings RPC method.
message QueryStakingsResponse {
  repeated StakingResponse               stakings   = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryQueuedStakingsRequest is the request type for the Query/QueuedStakings RPC method.
message QueryQueuedStakingsRequest {
  string                                farmer             = 1;
  string                                staking_coin_denom = 2;
  cosmos.base.query.v1beta1.PageRequest pagination         = 3;
}

// QueryQueuedStakingsResponse is the response type for the Query/QueuedStakings RPC method.
message QueryQueuedStakingsResponse {
  repeated QueuedStakingResponse         queued_stakings = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination      = 2;
}

// QueryTotalStakingsRequest is the request type for the Query/TotalStakings RPC method.
message QueryTotalStakingsRequest {
  string staking_coin_denom = 1;
}

// QueryTotalStakingsResponse is the response type for the Query/TotalStakings RPC method.
message QueryTotalStakingsResponse {
  string amount = 1 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

// QueryRewardsRequest is the request type for the Query/Rewards RPC method.
message QueryRewardsRequest {
  string                                farmer             = 1;
  string                                staking_coin_denom = 2;
  cosmos.base.query.v1beta1.PageRequest pagination         = 3;
}

// QueryRewardsResponse is the response type for the Query/Rewards RPC method.
message QueryRewardsResponse {
  repeated RewardsResponse               rewards    = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryUnharvestedRewardsRequest is the request type for the Query/UnharvestedRewards RPC method.
message QueryUnharvestedRewardsRequest {
  string                                farmer             = 1;
  string                                staking_coin_denom = 2;
  cosmos.base.query.v1beta1.PageRequest pagination         = 3;
}

// QueryUnharvestedRewardsResponse is the response type for the Query/UnharvestedRewards RPC method.
message QueryUnharvestedRewardsResponse {
  repeated UnharvestedRewardsResponse    unharvested_rewards = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination          = 2;
}

// QueryCurrentEpochDaysRequest is the request type for the Query/CurrentEpochDays RPC method.
message QueryCurrentEpochDaysRequest {}

// QueryCurrentEpochDaysResponse is the response type for the Query/CurrentEpochDays RPC method.
message QueryCurrentEpochDaysResponse {
  uint32 current_epoch_days = 1;
}

// QueryHistoricalRewardsRequest is the request type for the Query/HistoricalRewards RPC method.
message QueryHistoricalRewardsRequest {
  string                                staking_coin_denom = 1;
  cosmos.base.query.v1beta1.PageRequest pagination         = 2;
}

// QueryHistoricalRewardsResponse is the response type for the Query/HistoricalRewards RPC method.
message QueryHistoricalRewardsResponse {
  repeated HistoricalRewardsResponse     historical_rewards = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination         = 2;
}

message StakingResponse {
  string staking_coin_denom = 1;

  string amount = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];

  uint64 starting_epoch = 3;
}

message QueuedStakingResponse {
  string staking_coin_denom = 1;

  string amount = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];

  google.protobuf.Timestamp end_time = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message RewardsResponse {
  string staking_coin_denom = 1;

  repeated cosmos.base.v1beta1.Coin rewards = 2
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
}

message UnharvestedRewardsResponse {
  string staking_coin_denom = 1;

  repeated cosmos.base.v1beta1.Coin rewards = 2
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
}

message HistoricalRewardsResponse {
  uint64 epoch = 1;

  repeated cosmos.base.v1beta1.DecCoin cumulative_unit_rewards = 2
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (gogoproto.nullable) = false];
}